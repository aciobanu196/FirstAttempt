13:08:33.924 [main] DEBUG slick.compiler.QueryCompiler - Source:
| SortBy Ordering(Desc,NullsDefault)
|   from s2: Bind
|     from s3: Filter s4
|       from s4: Join Inner
|         left s5: TableExpansion
|           table s7: Table PRODUCTS
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s7.PRODUCT_ID : Int'
|               2: Path s7.PRODUCT_NAME : String'
|               3: Path s7.PRODUCT_PRICE : Int'
|               4: Path s7.PRODUCT_TYPE_ID : Int'
|               5: Path s7.PRODUCT_QUANTITY : Int'
|         right s6: TableExpansion
|           table s8: Table TYPES
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s8.TYPE_ID : Int'
|               2: Path s8.TYPE_NAME : String'
|         on: Apply Function =
|           0: Path s5.PRODUCT_TYPE_ID : Int'
|           1: Path s6.TYPE_ID : Int'
|       where: Apply Function >
|         0: Path s4._1.PRODUCT_QUANTITY : Int'
|         1: LiteralNode 0 (volatileHint=false)
|     select: Pure t9
|       value: ProductNode
|         1: Path s3._1.PRODUCT_ID : Int'
|         2: Path s3._1.PRODUCT_NAME : String'
|         3: Path s3._1.PRODUCT_PRICE : Int'
|         4: Path s3._1.PRODUCT_QUANTITY : Int'
|         5: Path s3._2.TYPE_NAME : String'
|   by0: Path s2._5

13:08:33.935 [main] DEBUG slick.compiler.AssignUniqueSymbols - Detected features: UsedFeatures(false,true,false,false)
13:08:33.944 [main] DEBUG slick.compiler.QueryCompiler - After phase assignUniqueSymbols:
| SortBy Ordering(Desc,NullsDefault)
|   from s10: Bind
|     from s11: Filter s12
|       from s12: Join Inner
|         left s13: TableExpansion
|           table s15: Table PRODUCTS
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s15.PRODUCT_ID : Int'
|               2: Path s15.PRODUCT_NAME : String'
|               3: Path s15.PRODUCT_PRICE : Int'
|               4: Path s15.PRODUCT_TYPE_ID : Int'
|               5: Path s15.PRODUCT_QUANTITY : Int'
|         right s14: TableExpansion
|           table s17: Table TYPES
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s17.TYPE_ID : Int'
|               2: Path s17.TYPE_NAME : String'
|         on: Apply Function =
|           0: Path s13.PRODUCT_TYPE_ID : Int'
|           1: Path s14.TYPE_ID : Int'
|       where: Apply Function >
|         0: Path s12._1.PRODUCT_QUANTITY : Int'
|         1: LiteralNode 0 (volatileHint=false)
|     select: Pure t19
|       value: ProductNode
|         1: Path s11._1.PRODUCT_ID : Int'
|         2: Path s11._1.PRODUCT_NAME : String'
|         3: Path s11._1.PRODUCT_PRICE : Int'
|         4: Path s11._1.PRODUCT_QUANTITY : Int'
|         5: Path s11._2.TYPE_NAME : String'
|   by0: Path s10._5

13:08:33.946 [main] DEBUG slick.compiler.QueryCompiler - After phase unrollTailBinds: (no change)
13:08:33.953 [main] DEBUG slick.compiler.QueryCompiler - After phase inferTypes: (no change)
13:08:33.965 [main] DEBUG slick.compiler.ExpandTables - Found Selects for NominalTypes: @(slick.jdbc.MySQLProfile$._.PRODUCTS), @(slick.jdbc.MySQLProfile$._.TYPES)
13:08:33.976 [main] DEBUG slick.compiler.ExpandTables - With correct table types:
| SortBy Ordering(Desc,NullsDefault) : Vector[t19<(Int', String', Int', Int', String')>]
|   from s10: Bind : Vector[t19<(Int', String', Int', Int', String')>]
|     from s11: Filter s12 : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       from s12: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|         left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|         right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|         on: Apply Function = : Boolean
|           0: Path s13.PRODUCT_TYPE_ID : Int'
|           1: Path s14.TYPE_ID : Int'
|       where: Apply Function > : Boolean
|         0: Path s12._1.PRODUCT_QUANTITY : Int'
|         1: LiteralNode 0 (volatileHint=false) : Int'
|     select: Pure t19 : Vector[t19<(Int', String', Int', Int', String')>]
|       value: ProductNode : (Int', String', Int', Int', String')
|         1: Path s11._1.PRODUCT_ID : Int'
|         2: Path s11._1.PRODUCT_NAME : String'
|         3: Path s11._1.PRODUCT_PRICE : Int'
|         4: Path s11._1.PRODUCT_QUANTITY : Int'
|         5: Path s11._2.TYPE_NAME : String'
|   by0: Path s10._5 : String'

13:08:33.978 [main] DEBUG slick.compiler.ExpandTables - Table expansions: @t18 -> (s17,TypeMapping), @t16 -> (s15,TypeMapping)
13:08:33.987 [main] DEBUG slick.compiler.QueryCompiler - After phase expandTables:
| SortBy Ordering(Desc,NullsDefault) : Vector[t19<(Int', String', Int', Int', String')>]
|   from s10: Bind : Vector[t19<(Int', String', Int', Int', String')>]
|     from s11: Filter s12 : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       from s12: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|         left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|         right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|         on: Apply Function = : Boolean
|           0: Path s13.PRODUCT_TYPE_ID : Int'
|           1: Path s14.TYPE_ID : Int'
|       where: Apply Function > : Boolean
|         0: Path s12._1.PRODUCT_QUANTITY : Int'
|         1: LiteralNode 0 (volatileHint=false) : Int'
|     select: Pure t19 : Vector[t19<(Int', String', Int', Int', String')>]
|       value: ProductNode : (Int', String', Int', Int', String')
|         1: Path s11._1.PRODUCT_ID : Int'
|         2: Path s11._1.PRODUCT_NAME : String'
|         3: Path s11._1.PRODUCT_PRICE : Int'
|         4: Path s11._1.PRODUCT_QUANTITY : Int'
|         5: Path s11._2.TYPE_NAME : String'
|   by0: Path s10._5 : String'

13:08:33.992 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s20 for Table PRODUCTS
13:08:33.993 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s21 for Table TYPES
13:08:33.993 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s22 for Join Inner
13:08:33.994 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s23 for SortBy Ordering(Desc,NullsDefault)
13:08:34.005 [main] DEBUG slick.compiler.QueryCompiler - After phase forceOuterBinds:
| Bind : Vector[t24<t19<(Int', String', Int', Int', String')>>]
|   from s23: SortBy Ordering(Desc,NullsDefault) : Vector[t19<(Int', String', Int', Int', String')>]
|     from s10: Bind : Vector[t19<(Int', String', Int', Int', String')>]
|       from s11: Filter s12 : Vector[t25<(t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)>]
|         from s12: Bind : Vector[t25<(t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)>]
|           from s22: Join Inner : Vector[(t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)]
|             left s13: Bind : Vector[t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>]
|               from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               select: Pure t26 : Vector[t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>]
|                 value: Ref s20 : @t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>
|             right s14: Bind : Vector[t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>]
|               from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               select: Pure t27 : Vector[t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>]
|                 value: Ref s21 : @t18<{TYPE_ID: Int', TYPE_NAME: String'}>
|             on: Apply Function = : Boolean
|               0: Path s13.PRODUCT_TYPE_ID : Int'
|               1: Path s14.TYPE_ID : Int'
|           select: Pure t25 : Vector[t25<(t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)>]
|             value: Ref s22 : (t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)
|         where: Apply Function > : Boolean
|           0: Path s12._1.PRODUCT_QUANTITY : Int'
|           1: LiteralNode 0 (volatileHint=false) : Int'
|       select: Pure t19 : Vector[t19<(Int', String', Int', Int', String')>]
|         value: ProductNode : (Int', String', Int', Int', String')
|           1: Path s11._1.PRODUCT_ID : Int'
|           2: Path s11._1.PRODUCT_NAME : String'
|           3: Path s11._1.PRODUCT_PRICE : Int'
|           4: Path s11._1.PRODUCT_QUANTITY : Int'
|           5: Path s11._2.TYPE_NAME : String'
|     by0: Path s10._5 : String'
|   select: Pure t24 : Vector[t24<t19<(Int', String', Int', Int', String')>>]
|     value: Ref s23 : t19<(Int', String', Int', Int', String')>

13:08:34.007 [main] DEBUG slick.compiler.QueryCompiler - After phase removeMappedTypes: (no change)
13:08:34.008 [main] DEBUG slick.compiler.QueryCompiler - After phase expandSums: (no change)
13:08:34.010 [main] DEBUG slick.compiler.QueryCompiler - After phase emulateOuterJoins: (no change)
13:08:34.029 [main] DEBUG slick.compiler.QueryCompiler - After phase expandRecords:
| Bind : Vector[t24<(Int', String', Int', Int', String')>]
|   from s23: SortBy Ordering(Desc,NullsDefault) : Vector[t19<(Int', String', Int', Int', String')>]
|     from s10: Bind : Vector[t19<(Int', String', Int', Int', String')>]
|       from s11: Filter s12 : Vector[t25<({PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}, {TYPE_ID: Int', TYPE_NAME: String'})>]
|         from s12: Bind : Vector[t25<({PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}, {TYPE_ID: Int', TYPE_NAME: String'})>]
|           from s22: Join Inner : Vector[(t26<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, t27<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|             left s13: Bind : Vector[t26<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               select: Pure t26 : Vector[t26<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|                 value: StructNode : {PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}
|                   PRODUCT_NAME: Path s20.PRODUCT_NAME : String'
|                   PRODUCT_QUANTITY: Path s20.PRODUCT_QUANTITY : Int'
|                   PRODUCT_TYPE_ID: Path s20.PRODUCT_TYPE_ID : Int'
|                   PRODUCT_ID: Path s20.PRODUCT_ID : Int'
|                   PRODUCT_PRICE: Path s20.PRODUCT_PRICE : Int'
|             right s14: Bind : Vector[t27<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               select: Pure t27 : Vector[t27<{TYPE_ID: Int', TYPE_NAME: String'}>]
|                 value: StructNode : {TYPE_ID: Int', TYPE_NAME: String'}
|                   TYPE_ID: Path s21.TYPE_ID : Int'
|                   TYPE_NAME: Path s21.TYPE_NAME : String'
|             on: Apply Function = : Boolean
|               0: Path s13.PRODUCT_TYPE_ID : Int'
|               1: Path s14.TYPE_ID : Int'
|           select: Pure t25 : Vector[t25<({PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}, {TYPE_ID: Int', TYPE_NAME: String'})>]
|             value: ProductNode : ({PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}, {TYPE_ID: Int', TYPE_NAME: String'})
|               1: StructNode : {PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}
|                 PRODUCT_NAME: Path s22._1.PRODUCT_NAME : String'
|                 PRODUCT_QUANTITY: Path s22._1.PRODUCT_QUANTITY : Int'
|                 PRODUCT_TYPE_ID: Path s22._1.PRODUCT_TYPE_ID : Int'
|                 PRODUCT_ID: Path s22._1.PRODUCT_ID : Int'
|                 PRODUCT_PRICE: Path s22._1.PRODUCT_PRICE : Int'
|               2: StructNode : {TYPE_ID: Int', TYPE_NAME: String'}
|                 TYPE_ID: Path s22._2.TYPE_ID : Int'
|                 TYPE_NAME: Path s22._2.TYPE_NAME : String'
|         where: Apply Function > : Boolean
|           0: Path s12._1.PRODUCT_QUANTITY : Int'
|           1: LiteralNode 0 (volatileHint=false) : Int'
|       select: Pure t19 : Vector[t19<(Int', String', Int', Int', String')>]
|         value: ProductNode : (Int', String', Int', Int', String')
|           1: Path s11._1.PRODUCT_ID : Int'
|           2: Path s11._1.PRODUCT_NAME : String'
|           3: Path s11._1.PRODUCT_PRICE : Int'
|           4: Path s11._1.PRODUCT_QUANTITY : Int'
|           5: Path s11._2.TYPE_NAME : String'
|     by0: Path s10._5 : String'
|   select: Pure t24 : Vector[t24<(Int', String', Int', Int', String')>]
|     value: ProductNode : (Int', String', Int', Int', String')
|       1: Path s23._1 : Int'
|       2: Path s23._2 : String'
|       3: Path s23._3 : Int'
|       4: Path s23._4 : Int'
|       5: Path s23._5 : String'

13:08:34.033 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t26
13:08:34.034 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_NAME with symbols 
| Path s20.PRODUCT_NAME : String'

13:08:34.035 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_NAME to:
| Path s20.PRODUCT_NAME

13:08:34.036 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_QUANTITY with symbols 
| Path s20.PRODUCT_QUANTITY : Int'

13:08:34.036 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_QUANTITY to:
| Path s20.PRODUCT_QUANTITY

13:08:34.036 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_TYPE_ID with symbols 
| Path s20.PRODUCT_TYPE_ID : Int'

13:08:34.036 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_TYPE_ID to:
| Path s20.PRODUCT_TYPE_ID

13:08:34.036 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_ID with symbols 
| Path s20.PRODUCT_ID : Int'

13:08:34.036 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_ID to:
| Path s20.PRODUCT_ID

13:08:34.036 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_PRICE with symbols 
| Path s20.PRODUCT_PRICE : Int'

13:08:34.037 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_PRICE to:
| Path s20.PRODUCT_PRICE

13:08:34.045 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| StructNode
|   PRODUCT_NAME: Path s20.PRODUCT_NAME
|   PRODUCT_QUANTITY: Path s20.PRODUCT_QUANTITY
|   PRODUCT_TYPE_ID: Path s20.PRODUCT_TYPE_ID
|   PRODUCT_ID: Path s20.PRODUCT_ID
|   PRODUCT_PRICE: Path s20.PRODUCT_PRICE

13:08:34.047 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_NAME
| Path s20.PRODUCT_NAME

13:08:34.047 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s28 -> Path s20.PRODUCT_NAME
13:08:34.048 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_QUANTITY
| Path s20.PRODUCT_QUANTITY

13:08:34.048 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s29 -> Path s20.PRODUCT_QUANTITY
13:08:34.048 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_TYPE_ID
| Path s20.PRODUCT_TYPE_ID

13:08:34.049 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s30 -> Path s20.PRODUCT_TYPE_ID
13:08:34.049 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_ID
| Path s20.PRODUCT_ID

13:08:34.049 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s31 -> Path s20.PRODUCT_ID
13:08:34.049 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_PRICE
| Path s20.PRODUCT_PRICE

13:08:34.049 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s32 -> Path s20.PRODUCT_PRICE
13:08:34.051 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t26: (HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28), UnassignedType)
13:08:34.052 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t26
|   value: StructNode
|     s28: Path s20.PRODUCT_NAME
|     s29: Path s20.PRODUCT_QUANTITY
|     s30: Path s20.PRODUCT_TYPE_ID
|     s31: Path s20.PRODUCT_ID
|     s32: Path s20.PRODUCT_PRICE

13:08:34.052 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t27
13:08:34.053 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s21.TYPE_ID with symbols t26
| Path s21.TYPE_ID : Int'

13:08:34.053 [main] DEBUG slick.compiler.FlattenProjections - Translated s21.TYPE_ID to:
| Path s21.TYPE_ID

13:08:34.053 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s21.TYPE_NAME with symbols t26
| Path s21.TYPE_NAME : String'

13:08:34.053 [main] DEBUG slick.compiler.FlattenProjections - Translated s21.TYPE_NAME to:
| Path s21.TYPE_NAME

13:08:34.054 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| StructNode
|   TYPE_ID: Path s21.TYPE_ID
|   TYPE_NAME: Path s21.TYPE_NAME

13:08:34.054 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path TYPE_ID
| Path s21.TYPE_ID

13:08:34.054 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s33 -> Path s21.TYPE_ID
13:08:34.054 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path TYPE_NAME
| Path s21.TYPE_NAME

13:08:34.054 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s34 -> Path s21.TYPE_NAME
13:08:34.055 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t27: (Map(List(TYPE_NAME) -> s34, List(TYPE_ID) -> s33), UnassignedType)
13:08:34.056 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t27
|   value: StructNode
|     s33: Path s21.TYPE_ID
|     s34: Path s21.TYPE_NAME

13:08:34.056 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s13.PRODUCT_TYPE_ID with symbols t26, t27
| Path s13.PRODUCT_TYPE_ID : Int'

13:08:34.057 [main] DEBUG slick.compiler.FlattenProjections - Found s13.PRODUCT_TYPE_ID with local part Path PRODUCT_TYPE_ID over t26
13:08:34.058 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.058 [main] DEBUG slick.compiler.FlattenProjections - Translated s13.PRODUCT_TYPE_ID to:
| Path s13.s30

13:08:34.058 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s14.TYPE_ID with symbols t26, t27
| Path s14.TYPE_ID : Int'

13:08:34.058 [main] DEBUG slick.compiler.FlattenProjections - Found s14.TYPE_ID with local part Path TYPE_ID over t27
13:08:34.058 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t27: Map(List(TYPE_NAME) -> s34, List(TYPE_ID) -> s33)
13:08:34.058 [main] DEBUG slick.compiler.FlattenProjections - Translated s14.TYPE_ID to:
| Path s14.s33

13:08:34.058 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t25
13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_NAME with symbols t26, t27
| Path s22._1.PRODUCT_NAME : String'

13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_NAME with local part Path PRODUCT_NAME over t26
13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_NAME to:
| Path s22._1.s28

13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_QUANTITY with symbols t26, t27
| Path s22._1.PRODUCT_QUANTITY : Int'

13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_QUANTITY with local part Path PRODUCT_QUANTITY over t26
13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_QUANTITY to:
| Path s22._1.s29

13:08:34.059 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_TYPE_ID with symbols t26, t27
| Path s22._1.PRODUCT_TYPE_ID : Int'

13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_TYPE_ID with local part Path PRODUCT_TYPE_ID over t26
13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_TYPE_ID to:
| Path s22._1.s30

13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_ID with symbols t26, t27
| Path s22._1.PRODUCT_ID : Int'

13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_ID with local part Path PRODUCT_ID over t26
13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_ID to:
| Path s22._1.s31

13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_PRICE with symbols t26, t27
| Path s22._1.PRODUCT_PRICE : Int'

13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_PRICE with local part Path PRODUCT_PRICE over t26
13:08:34.060 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_PRICE to:
| Path s22._1.s32

13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._2.TYPE_ID with symbols t26, t27
| Path s22._2.TYPE_ID : Int'

13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections - Found s22._2.TYPE_ID with local part Path TYPE_ID over t27
13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t27: Map(List(TYPE_NAME) -> s34, List(TYPE_ID) -> s33)
13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._2.TYPE_ID to:
| Path s22._2.s33

13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._2.TYPE_NAME with symbols t26, t27
| Path s22._2.TYPE_NAME : String'

13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections - Found s22._2.TYPE_NAME with local part Path TYPE_NAME over t27
13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t27: Map(List(TYPE_NAME) -> s34, List(TYPE_ID) -> s33)
13:08:34.061 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._2.TYPE_NAME to:
| Path s22._2.s34

13:08:34.063 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| ProductNode
|   1: StructNode
|     PRODUCT_NAME: Path s22._1.s28
|     PRODUCT_QUANTITY: Path s22._1.s29
|     PRODUCT_TYPE_ID: Path s22._1.s30
|     PRODUCT_ID: Path s22._1.s31
|     PRODUCT_PRICE: Path s22._1.s32
|   2: StructNode
|     TYPE_ID: Path s22._2.s33
|     TYPE_NAME: Path s22._2.s34

13:08:34.064 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1
| StructNode
|   PRODUCT_NAME: Path s22._1.s28
|   PRODUCT_QUANTITY: Path s22._1.s29
|   PRODUCT_TYPE_ID: Path s22._1.s30
|   PRODUCT_ID: Path s22._1.s31
|   PRODUCT_PRICE: Path s22._1.s32

13:08:34.064 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_NAME
| Path s22._1.s28

13:08:34.064 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s35 -> Path s22._1.s28
13:08:34.064 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_QUANTITY
| Path s22._1.s29

13:08:34.065 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s36 -> Path s22._1.s29
13:08:34.065 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_TYPE_ID
| Path s22._1.s30

13:08:34.065 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s37 -> Path s22._1.s30
13:08:34.065 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_ID
| Path s22._1.s31

13:08:34.065 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s38 -> Path s22._1.s31
13:08:34.065 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_PRICE
| Path s22._1.s32

13:08:34.065 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s39 -> Path s22._1.s32
13:08:34.066 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2
| StructNode
|   TYPE_ID: Path s22._2.s33
|   TYPE_NAME: Path s22._2.s34

13:08:34.066 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2.TYPE_ID
| Path s22._2.s33

13:08:34.066 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s40 -> Path s22._2.s33
13:08:34.066 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2.TYPE_NAME
| Path s22._2.s34

13:08:34.066 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s41 -> Path s22._2.s34
13:08:34.066 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t25: (HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41), UnassignedType)
13:08:34.067 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t25
|   value: StructNode
|     s35: Path s22._1.s28
|     s36: Path s22._1.s29
|     s37: Path s22._1.s30
|     s38: Path s22._1.s31
|     s39: Path s22._1.s32
|     s40: Path s22._2.s33
|     s41: Path s22._2.s34

13:08:34.067 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s12._1.PRODUCT_QUANTITY with symbols t26, t25, t27
| Path s12._1.PRODUCT_QUANTITY : Int'

13:08:34.067 [main] DEBUG slick.compiler.FlattenProjections - Found s12._1.PRODUCT_QUANTITY with local part Path _1.PRODUCT_QUANTITY over t25
13:08:34.067 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.067 [main] DEBUG slick.compiler.FlattenProjections - Translated s12._1.PRODUCT_QUANTITY to:
| Path s12.s36

13:08:34.067 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t19
13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._1.PRODUCT_ID with symbols t26, t25, t27
| Path s11._1.PRODUCT_ID : Int'

13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections - Found s11._1.PRODUCT_ID with local part Path _1.PRODUCT_ID over t25
13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._1.PRODUCT_ID to:
| Path s11.s38

13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._1.PRODUCT_NAME with symbols t26, t25, t27
| Path s11._1.PRODUCT_NAME : String'

13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections - Found s11._1.PRODUCT_NAME with local part Path _1.PRODUCT_NAME over t25
13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._1.PRODUCT_NAME to:
| Path s11.s35

13:08:34.068 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._1.PRODUCT_PRICE with symbols t26, t25, t27
| Path s11._1.PRODUCT_PRICE : Int'

13:08:34.069 [main] DEBUG slick.compiler.FlattenProjections - Found s11._1.PRODUCT_PRICE with local part Path _1.PRODUCT_PRICE over t25
13:08:34.069 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.069 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._1.PRODUCT_PRICE to:
| Path s11.s39

13:08:34.069 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._1.PRODUCT_QUANTITY with symbols t26, t25, t27
| Path s11._1.PRODUCT_QUANTITY : Int'

13:08:34.069 [main] DEBUG slick.compiler.FlattenProjections - Found s11._1.PRODUCT_QUANTITY with local part Path _1.PRODUCT_QUANTITY over t25
13:08:34.069 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.069 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._1.PRODUCT_QUANTITY to:
| Path s11.s36

13:08:34.069 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._2.TYPE_NAME with symbols t26, t25, t27
| Path s11._2.TYPE_NAME : String'

13:08:34.070 [main] DEBUG slick.compiler.FlattenProjections - Found s11._2.TYPE_NAME with local part Path _2.TYPE_NAME over t25
13:08:34.070 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.070 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._2.TYPE_NAME to:
| Path s11.s41

13:08:34.071 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| ProductNode
|   1: Path s11.s38
|   2: Path s11.s35
|   3: Path s11.s39
|   4: Path s11.s36
|   5: Path s11.s41

13:08:34.071 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1
| Path s11.s38

13:08:34.071 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s42 -> Path s11.s38
13:08:34.071 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2
| Path s11.s35

13:08:34.071 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s43 -> Path s11.s35
13:08:34.071 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _3
| Path s11.s39

13:08:34.071 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s44 -> Path s11.s39
13:08:34.071 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _4
| Path s11.s36

13:08:34.072 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s45 -> Path s11.s36
13:08:34.072 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _5
| Path s11.s41

13:08:34.072 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s46 -> Path s11.s41
13:08:34.072 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t19: (HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44), UnassignedType)
13:08:34.073 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t19
|   value: StructNode
|     s42: Path s11.s38
|     s43: Path s11.s35
|     s44: Path s11.s39
|     s45: Path s11.s36
|     s46: Path s11.s41

13:08:34.073 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s10._5 with symbols t26, t25, t27, t19
| Path s10._5 : String'

13:08:34.073 [main] DEBUG slick.compiler.FlattenProjections - Found s10._5 with local part Path _5 over t19
13:08:34.073 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.073 [main] DEBUG slick.compiler.FlattenProjections - Translated s10._5 to:
| Path s10.s46

13:08:34.073 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t24
13:08:34.073 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._1 with symbols t26, t25, t27, t19
| Path s23._1 : Int'

13:08:34.074 [main] DEBUG slick.compiler.FlattenProjections - Found s23._1 with local part Path _1 over t19
13:08:34.074 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.074 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._1 to:
| Path s23.s42

13:08:34.074 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._2 with symbols t26, t25, t27, t19
| Path s23._2 : String'

13:08:34.074 [main] DEBUG slick.compiler.FlattenProjections - Found s23._2 with local part Path _2 over t19
13:08:34.074 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.074 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._2 to:
| Path s23.s43

13:08:34.075 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._3 with symbols t26, t25, t27, t19
| Path s23._3 : Int'

13:08:34.075 [main] DEBUG slick.compiler.FlattenProjections - Found s23._3 with local part Path _3 over t19
13:08:34.075 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.075 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._3 to:
| Path s23.s44

13:08:34.075 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._4 with symbols t26, t25, t27, t19
| Path s23._4 : Int'

13:08:34.075 [main] DEBUG slick.compiler.FlattenProjections - Found s23._4 with local part Path _4 over t19
13:08:34.076 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.076 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._4 to:
| Path s23.s45

13:08:34.076 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._5 with symbols t26, t25, t27, t19
| Path s23._5 : String'

13:08:34.076 [main] DEBUG slick.compiler.FlattenProjections - Found s23._5 with local part Path _5 over t19
13:08:34.076 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.076 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._5 to:
| Path s23.s46

13:08:34.077 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| ProductNode
|   1: Path s23.s42
|   2: Path s23.s43
|   3: Path s23.s44
|   4: Path s23.s45
|   5: Path s23.s46

13:08:34.077 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1
| Path s23.s42

13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s47 -> Path s23.s42
13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2
| Path s23.s43

13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s48 -> Path s23.s43
13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _3
| Path s23.s44

13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s49 -> Path s23.s44
13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _4
| Path s23.s45

13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s50 -> Path s23.s45
13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _5
| Path s23.s46

13:08:34.078 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s51 -> Path s23.s46
13:08:34.079 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t24: (HashMap(List(_5) -> s51, List(_2) -> s48, List(_4) -> s50, List(_1) -> s47, List(_3) -> s49), UnassignedType)
13:08:34.079 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t24
|   value: StructNode
|     s47: Path s23.s42
|     s48: Path s23.s43
|     s49: Path s23.s44
|     s50: Path s23.s45
|     s51: Path s23.s46

13:08:34.085 [main] DEBUG slick.compiler.QueryCompiler - After phase flattenProjections:
| Bind : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|   from s23: SortBy Ordering(Desc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     from s10: Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|       from s11: Filter s12 : Vector[t25<{s35: String', s36: Int', s37: Int', s38: Int', s39: Int', s40: Int', s41: String'}>]
|         from s12: Bind : Vector[t25<{s35: String', s36: Int', s37: Int', s38: Int', s39: Int', s40: Int', s41: String'}>]
|           from s22: Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|             left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|               from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                 value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|                   s28: Path s20.PRODUCT_NAME : String'
|                   s29: Path s20.PRODUCT_QUANTITY : Int'
|                   s30: Path s20.PRODUCT_TYPE_ID : Int'
|                   s31: Path s20.PRODUCT_ID : Int'
|                   s32: Path s20.PRODUCT_PRICE : Int'
|             right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|               from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|                 value: StructNode : {s33: Int', s34: String'}
|                   s33: Path s21.TYPE_ID : Int'
|                   s34: Path s21.TYPE_NAME : String'
|             on: Apply Function = : Boolean
|               0: Path s13.s30 : Int'
|               1: Path s14.s33 : Int'
|           select: Pure t25 : Vector[t25<{s35: String', s36: Int', s37: Int', s38: Int', s39: Int', s40: Int', s41: String'}>]
|             value: StructNode : {s35: String', s36: Int', s37: Int', s38: Int', s39: Int', s40: Int', s41: String'}
|               s35: Path s22._1.s28 : String'
|               s36: Path s22._1.s29 : Int'
|               s37: Path s22._1.s30 : Int'
|               s38: Path s22._1.s31 : Int'
|               s39: Path s22._1.s32 : Int'
|               s40: Path s22._2.s33 : Int'
|               s41: Path s22._2.s34 : String'
|         where: Apply Function > : Boolean
|           0: Path s12.s36 : Int'
|           1: LiteralNode 0 (volatileHint=false) : Int'
|       select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|         value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|           s42: Path s11.s38 : Int'
|           s43: Path s11.s35 : String'
|           s44: Path s11.s39 : Int'
|           s45: Path s11.s36 : Int'
|           s46: Path s11.s41 : String'
|     by0: Path s10.s46 : String'
|   select: Pure t24 : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|     value: StructNode : {s47: Int', s48: String', s49: Int', s50: Int', s51: String'}
|       s47: Path s23.s42 : Int'
|       s48: Path s23.s43 : String'
|       s49: Path s23.s44 : Int'
|       s50: Path s23.s45 : Int'
|       s51: Path s23.s46 : String'

13:08:34.087 [main] DEBUG slick.compiler.QueryCompiler - After phase rewriteJoins: (no change)
13:08:34.089 [main] DEBUG slick.compiler.QueryCompiler - After phase verifySymbols: (no change)
13:08:34.092 [main] DEBUG slick.compiler.QueryCompiler - After phase relabelUnions: (no change)
13:08:34.093 [main] DEBUG slick.compiler.QueryCompiler - After phase createAggregates: (no change)
13:08:34.095 [main] DEBUG slick.compiler.QueryCompiler - After phase resolveZipJoins: (no change)
13:08:34.099 [main] DEBUG slick.compiler.PruneProjections - Unreferenced: t24; Field refs: (@t16,PRODUCT_TYPE_ID), (t26,s29), (@t16,PRODUCT_ID), (t19,s46), (t19,s45), (t27,s33), (t26,s31), (t26,s28), (t26,s30), (t25,s38), (t19,s44), (t25,s36), (@t18,TYPE_NAME), (t26,s32), (@t18,TYPE_ID), (t25,s35), (t19,s43), (t25,s39), (t25,s41), (t19,s42), (@t16,PRODUCT_PRICE), (@t16,PRODUCT_NAME), (t27,s34), (@t16,PRODUCT_QUANTITY)
13:08:34.115 [main] DEBUG slick.compiler.QueryCompiler - After phase pruneProjections:
| Bind : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|   from s23: SortBy Ordering(Desc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     from s10: Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|       from s11: Filter s12 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|         from s12: Bind : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|           from s22: Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|             left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|               from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                 value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|                   s28: Path s20.PRODUCT_NAME : String'
|                   s29: Path s20.PRODUCT_QUANTITY : Int'
|                   s30: Path s20.PRODUCT_TYPE_ID : Int'
|                   s31: Path s20.PRODUCT_ID : Int'
|                   s32: Path s20.PRODUCT_PRICE : Int'
|             right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|               from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|                 value: StructNode : {s33: Int', s34: String'}
|                   s33: Path s21.TYPE_ID : Int'
|                   s34: Path s21.TYPE_NAME : String'
|             on: Apply Function = : Boolean
|               0: Path s13.s30 : Int'
|               1: Path s14.s33 : Int'
|           select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|             value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|               s35: Path s22._1.s28 : String'
|               s36: Path s22._1.s29 : Int'
|               s38: Path s22._1.s31 : Int'
|               s39: Path s22._1.s32 : Int'
|               s41: Path s22._2.s34 : String'
|         where: Apply Function > : Boolean
|           0: Path s12.s36 : Int'
|           1: LiteralNode 0 (volatileHint=false) : Int'
|       select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|         value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|           s42: Path s11.s38 : Int'
|           s43: Path s11.s35 : String'
|           s44: Path s11.s39 : Int'
|           s45: Path s11.s36 : Int'
|           s46: Path s11.s41 : String'
|     by0: Path s10.s46 : String'
|   select: Pure t24 : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|     value: StructNode : {s47: Int', s48: String', s49: Int', s50: Int', s51: String'}
|       s47: Path s23.s42 : Int'
|       s48: Path s23.s43 : String'
|       s49: Path s23.s44 : Int'
|       s50: Path s23.s45 : Int'
|       s51: Path s23.s46 : String'

13:08:34.116 [main] DEBUG slick.compiler.RewriteDistinct - No DISTINCT used as determined by assignUniqueSymbols - skipping phase
13:08:34.116 [main] DEBUG slick.compiler.QueryCompiler - After phase rewriteDistinct: (no change)
13:08:34.120 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from t24<t19<(Int', String', Int', Int', String')>>
13:08:34.121 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from Int'
13:08:34.121 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from String'
13:08:34.121 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from Int'
13:08:34.121 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from Int'
13:08:34.121 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from String'
13:08:34.173 [main] DEBUG slick.compiler.QueryCompiler - After phase createResultSetMapping:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Bind : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|     from s23: SortBy Ordering(Desc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|       from s10: Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|         from s11: Filter s12 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|           from s12: Bind : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|             from s22: Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|               left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                 from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|                 select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                   value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|                     s28: Path s20.PRODUCT_NAME : String'
|                     s29: Path s20.PRODUCT_QUANTITY : Int'
|                     s30: Path s20.PRODUCT_TYPE_ID : Int'
|                     s31: Path s20.PRODUCT_ID : Int'
|                     s32: Path s20.PRODUCT_PRICE : Int'
|               right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|                 from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|                 select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|                   value: StructNode : {s33: Int', s34: String'}
|                     s33: Path s21.TYPE_ID : Int'
|                     s34: Path s21.TYPE_NAME : String'
|               on: Apply Function = : Boolean
|                 0: Path s13.s30 : Int'
|                 1: Path s14.s33 : Int'
|             select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|               value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|                 s35: Path s22._1.s28 : String'
|                 s36: Path s22._1.s29 : Int'
|                 s38: Path s22._1.s31 : Int'
|                 s39: Path s22._1.s32 : Int'
|                 s41: Path s22._2.s34 : String'
|           where: Apply Function > : Boolean
|             0: Path s12.s36 : Int'
|             1: LiteralNode 0 (volatileHint=false) : Int'
|         select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|           value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|             s42: Path s11.s38 : Int'
|             s43: Path s11.s35 : String'
|             s44: Path s11.s39 : Int'
|             s45: Path s11.s36 : Int'
|             s46: Path s11.s41 : String'
|       by0: Path s10.s46 : String'
|     select: Pure t24 : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|       value: StructNode : {s47: Int', s48: String', s49: Int', s50: Int', s51: String'}
|         s47: Path s23.s42 : Int'
|         s48: Path s23.s43 : String'
|         s49: Path s23.s44 : Int'
|         s50: Path s23.s45 : Int'
|         s51: Path s23.s46 : String'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s47 : Int'
|     2: Path s52.s48 : String'
|     3: Path s52.s49 : Int'
|     4: Path s52.s50 : Int'
|     5: Path s52.s51 : String'

13:08:34.179 [main] DEBUG slick.compiler.HoistClientOps - Hoisting operations from defs: 
13:08:34.180 [main] DEBUG slick.compiler.HoistClientOps - New defs: HashMap(0 -> (Path s23.s42,s53), 1 -> (Path s23.s43,s54), 2 -> (Path s23.s44,s55), 3 -> (Path s23.s45,s56), 4 -> (Path s23.s46,s57))
13:08:34.190 [main] DEBUG slick.compiler.HoistClientOps - New ResultSetMapping:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Bind : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     from s23: ...
|     select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|       value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|         s53: Path s23.s42 : Int'
|         s55: Path s23.s44 : Int'
|         s54: Path s23.s43 : String'
|         s57: Path s23.s46 : String'
|         s56: Path s23.s45 : Int'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s53 : Int'
|     2: Path s52.s54 : String'
|     3: Path s52.s55 : Int'
|     4: Path s52.s56 : Int'
|     5: Path s52.s57 : String'

13:08:34.194 [main] DEBUG slick.compiler.QueryCompiler - After phase hoistClientOps:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Bind : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     from s23: SortBy Ordering(Desc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|       from s10: Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|         from s11: Filter s12 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|           from s12: Bind : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|             from s22: Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|               left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                 from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|                 select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                   value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|                     s28: Path s20.PRODUCT_NAME : String'
|                     s29: Path s20.PRODUCT_QUANTITY : Int'
|                     s30: Path s20.PRODUCT_TYPE_ID : Int'
|                     s31: Path s20.PRODUCT_ID : Int'
|                     s32: Path s20.PRODUCT_PRICE : Int'
|               right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|                 from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|                 select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|                   value: StructNode : {s33: Int', s34: String'}
|                     s33: Path s21.TYPE_ID : Int'
|                     s34: Path s21.TYPE_NAME : String'
|               on: Apply Function = : Boolean
|                 0: Path s13.s30 : Int'
|                 1: Path s14.s33 : Int'
|             select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|               value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|                 s35: Path s22._1.s28 : String'
|                 s36: Path s22._1.s29 : Int'
|                 s38: Path s22._1.s31 : Int'
|                 s39: Path s22._1.s32 : Int'
|                 s41: Path s22._2.s34 : String'
|           where: Apply Function > : Boolean
|             0: Path s12.s36 : Int'
|             1: LiteralNode 0 (volatileHint=false) : Int'
|         select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|           value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|             s42: Path s11.s38 : Int'
|             s43: Path s11.s35 : String'
|             s44: Path s11.s39 : Int'
|             s45: Path s11.s36 : Int'
|             s46: Path s11.s41 : String'
|       by0: Path s10.s46 : String'
|     select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|       value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|         s53: Path s23.s42 : Int'
|         s55: Path s23.s44 : Int'
|         s54: Path s23.s43 : String'
|         s57: Path s23.s46 : String'
|         s56: Path s23.s45 : Int'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s53 : Int'
|     2: Path s52.s54 : String'
|     3: Path s52.s55 : Int'
|     4: Path s52.s56 : Int'
|     5: Path s52.s57 : String'

13:08:34.196 [main] DEBUG slick.compiler.QueryCompiler - After phase reorderOperations: (no change)
13:08:34.199 [main] DEBUG slick.compiler.MergeToComprehensions - Table fields: MapView(<not computed>)
13:08:34.203 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from Join s13/s14:
| Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|   left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|     from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|       value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|         s28: Path s20.PRODUCT_NAME : String'
|         s29: Path s20.PRODUCT_QUANTITY : Int'
|         s30: Path s20.PRODUCT_TYPE_ID : Int'
|         s31: Path s20.PRODUCT_ID : Int'
|         s32: Path s20.PRODUCT_PRICE : Int'
|   right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|     from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|       value: StructNode : {s33: Int', s34: String'}
|         s33: Path s21.TYPE_ID : Int'
|         s34: Path s21.TYPE_NAME : String'
|   on: Apply Function = : Boolean
|     0: Path s13.s30 : Int'
|     1: Path s14.s33 : Int'

13:08:34.204 [main] DEBUG slick.compiler.MergeToComprehensions - Bind from s20 is aliasing: true
13:08:34.205 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from TableNode:
| Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]

13:08:34.206 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((@t16,PRODUCT_NAME),List(PRODUCT_NAME)), ((@t16,PRODUCT_QUANTITY),List(PRODUCT_QUANTITY)), ((@t16,PRODUCT_TYPE_ID),List(PRODUCT_TYPE_ID)), ((@t16,PRODUCT_ID),List(PRODUCT_ID)), ((@t16,PRODUCT_PRICE),List(PRODUCT_PRICE)))
13:08:34.207 [main] DEBUG slick.compiler.MergeToComprehensions - Recombining aliasing Bind mappings ConstArray((s28,Path s20.PRODUCT_NAME), (s29,Path s20.PRODUCT_QUANTITY), (s30,Path s20.PRODUCT_TYPE_ID), (s31,Path s20.PRODUCT_ID), (s32,Path s20.PRODUCT_PRICE))
13:08:34.209 [main] DEBUG slick.compiler.MergeToComprehensions - Bind from s21 is aliasing: true
13:08:34.209 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from TableNode:
| Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]

13:08:34.209 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((@t18,TYPE_ID),List(TYPE_ID)), ((@t18,TYPE_NAME),List(TYPE_NAME)))
13:08:34.209 [main] DEBUG slick.compiler.MergeToComprehensions - Recombining aliasing Bind mappings ConstArray((s33,Path s21.TYPE_ID), (s34,Path s21.TYPE_NAME))
13:08:34.210 [main] DEBUG slick.compiler.MergeToComprehensions - Converted left side of Join s13/s14:
| Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]

13:08:34.211 [main] DEBUG slick.compiler.MergeToComprehensions - Converted right side of Join s13/s14:
| Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]

13:08:34.212 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings for `on` clause in Join s13/s14: HashMap((t26,s29) -> List(_1, PRODUCT_QUANTITY), (t27,s33) -> List(_2, TYPE_ID), (t26,s31) -> List(_1, PRODUCT_ID), (t26,s28) -> List(_1, PRODUCT_NAME), (t26,s30) -> List(_1, PRODUCT_TYPE_ID), (t26,s32) -> List(_1, PRODUCT_PRICE), (t27,s34) -> List(_2, TYPE_NAME))
13:08:34.215 [main] DEBUG slick.compiler.MergeToComprehensions - Transformed `on` clause in Join s13/s14:
| Apply Function = : Boolean
|   0: Path s13.PRODUCT_TYPE_ID : Int'
|   1: Path s14.TYPE_ID : Int'

13:08:34.216 [main] DEBUG slick.compiler.MergeToComprehensions - Created source from Join s13/s14:
| Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|   left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|   right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|   on: Apply Function = : Boolean
|     0: Path s13.PRODUCT_TYPE_ID : Int'
|     1: Path s14.TYPE_ID : Int'

13:08:34.217 [main] DEBUG slick.compiler.MergeToComprehensions - Building new Comprehension from:
| Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|   left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|   right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|   on: Apply Function = : Boolean
|     0: Path s13.PRODUCT_TYPE_ID : Int'
|     1: Path s14.TYPE_ID : Int'

13:08:34.228 [main] DEBUG slick.compiler.MergeToComprehensions - Built new Comprehension:
| Comprehension s59, None, None, ConstArray(), None, None, None, None, false : Vector[t60<{s61: String', s62: Int', s63: Int', s64: Int', s65: Int', s66: Int', s67: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t60 : Vector[t60<{s61: String', s62: Int', s63: Int', s64: Int', s65: Int', s66: Int', s67: String'}>]
|     value: StructNode : {s61: String', s62: Int', s63: Int', s64: Int', s65: Int', s66: Int', s67: String'}
|       s61: Path s59._1.PRODUCT_NAME : String'
|       s62: Path s59._1.PRODUCT_QUANTITY : Int'
|       s63: Path s59._1.PRODUCT_TYPE_ID : Int'
|       s64: Path s59._1.PRODUCT_ID : Int'
|       s65: Path s59._1.PRODUCT_PRICE : Int'
|       s66: Path s59._2.TYPE_ID : Int'
|       s67: Path s59._2.TYPE_NAME : String'

13:08:34.228 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: HashMap((t26,s29) -> s62, (t27,s33) -> s66, (t26,s31) -> s64, (t26,s28) -> s61, (t26,s30) -> s63, (t26,s32) -> s65, (t27,s34) -> s67)
13:08:34.230 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|   from s22: ...
|   select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|     value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|       s35: Path s22._1.s28 : String'
|       s36: Path s22._1.s29 : Int'
|       s38: Path s22._1.s31 : Int'
|       s39: Path s22._1.s32 : Int'
|       s41: Path s22._2.s34 : String'

13:08:34.232 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Bind into Comprehension as 'select':
| Comprehension s59, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|     value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|       s35: Path s59._1.PRODUCT_NAME : String'
|       s36: Path s59._1.PRODUCT_QUANTITY : Int'
|       s38: Path s59._1.PRODUCT_ID : Int'
|       s39: Path s59._1.PRODUCT_PRICE : Int'
|       s41: Path s59._2.TYPE_NAME : String'

13:08:34.233 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: HashMap((t25,s39) -> s39, (t25,s41) -> s41, (t25,s38) -> s38, (t25,s36) -> s36, (t25,s35) -> s35)
13:08:34.235 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Filter into Comprehension:
| Filter s12 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|   from s12: ...
|   where: Apply Function > : Boolean
|     0: Path s12.s36 : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'

13:08:34.237 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Filter into Comprehension:
| Comprehension s59, Some(Apply Function >), None, ConstArray(), None, None, None, None, false : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|     value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|       s35: Path s59._1.PRODUCT_NAME : String'
|       s36: Path s59._1.PRODUCT_QUANTITY : Int'
|       s38: Path s59._1.PRODUCT_ID : Int'
|       s39: Path s59._1.PRODUCT_PRICE : Int'
|       s41: Path s59._2.TYPE_NAME : String'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'

13:08:34.238 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|   from s11: ...
|   select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|       s42: Path s11.s38 : Int'
|       s43: Path s11.s35 : String'
|       s44: Path s11.s39 : Int'
|       s45: Path s11.s36 : Int'
|       s46: Path s11.s41 : String'

13:08:34.240 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Bind into Comprehension as 'select':
| Comprehension s59, Some(Apply Function >), None, ConstArray(), None, None, None, None, false : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|       s42: Path s59._1.PRODUCT_ID : Int'
|       s43: Path s59._1.PRODUCT_NAME : String'
|       s44: Path s59._1.PRODUCT_PRICE : Int'
|       s45: Path s59._1.PRODUCT_QUANTITY : Int'
|       s46: Path s59._2.TYPE_NAME : String'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'

13:08:34.240 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: HashMap((t19,s43) -> s43, (t19,s46) -> s46, (t19,s45) -> s45, (t19,s42) -> s42, (t19,s44) -> s44)
13:08:34.241 [main] DEBUG slick.compiler.MergeToComprehensions - Merging SortBy into Comprehension:
| SortBy Ordering(Desc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|   from s10: ...
|   by0: Path s10.s46 : String'

13:08:34.245 [main] DEBUG slick.compiler.MergeToComprehensions - Merged SortBy into Comprehension:
| Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Desc,NullsDefault))), None, None, None, None, false : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|       s42: Path s59._1.PRODUCT_ID : Int'
|       s43: Path s59._1.PRODUCT_NAME : String'
|       s44: Path s59._1.PRODUCT_PRICE : Int'
|       s45: Path s59._1.PRODUCT_QUANTITY : Int'
|       s46: Path s59._2.TYPE_NAME : String'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'
|   orderBy Ordering(Desc,NullsDefault): Path s59._2.TYPE_NAME : String'

13:08:34.245 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Bind into Comprehension as 'select':
| Bind : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|   from s23: ...
|   select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|       s53: Path s23.s42 : Int'
|       s55: Path s23.s44 : Int'
|       s54: Path s23.s43 : String'
|       s57: Path s23.s46 : String'
|       s56: Path s23.s45 : Int'

13:08:34.248 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Bind into Comprehension as 'select':
| Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Desc,NullsDefault))), None, None, None, None, false : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|       s53: Path s59._1.PRODUCT_ID : Int'
|       s55: Path s59._1.PRODUCT_PRICE : Int'
|       s54: Path s59._1.PRODUCT_NAME : String'
|       s57: Path s59._2.TYPE_NAME : String'
|       s56: Path s59._1.PRODUCT_QUANTITY : Int'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'
|   orderBy Ordering(Desc,NullsDefault): Path s59._2.TYPE_NAME : String'

13:08:34.248 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: HashMap((t58,s56) -> s56, (t58,s54) -> s54, (t58,s53) -> s53, (t58,s55) -> s55, (t58,s57) -> s57)
13:08:34.249 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((t58,s56),List(s56)), ((t58,s54),List(s54)), ((t58,s53),List(s53)), ((t58,s55),List(s55)), ((t58,s57),List(s57)))
13:08:34.254 [main] DEBUG slick.compiler.QueryCompiler - After phase mergeToComprehensions:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Desc,NullsDefault))), None, None, None, None, false : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|       right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|       on: Apply Function = : Boolean
|         0: Path s13.PRODUCT_TYPE_ID : Int'
|         1: Path s14.TYPE_ID : Int'
|     select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|       value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|         s53: Path s59._1.PRODUCT_ID : Int'
|         s55: Path s59._1.PRODUCT_PRICE : Int'
|         s54: Path s59._1.PRODUCT_NAME : String'
|         s57: Path s59._2.TYPE_NAME : String'
|         s56: Path s59._1.PRODUCT_QUANTITY : Int'
|     where: Apply Function > : Boolean
|       0: Path s59._1.PRODUCT_QUANTITY : Int'
|       1: LiteralNode 0 (volatileHint=false) : Int'
|     orderBy Ordering(Desc,NullsDefault): Path s59._2.TYPE_NAME : String'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s53 : Int'
|     2: Path s52.s54 : String'
|     3: Path s52.s55 : Int'
|     4: Path s52.s56 : Int'
|     5: Path s52.s57 : String'

13:08:34.256 [main] DEBUG slick.compiler.QueryCompiler - After phase optimizeScalar: (no change)
13:08:34.259 [main] DEBUG slick.compiler.RemoveFieldNames - Required symbols: s53 -> 0, s55 -> 2, s54 -> 1, s57 -> 4, s56 -> 3
13:08:34.268 [main] DEBUG slick.compiler.RemoveFieldNames - Transformed RSM: 
| ResultSetMapping
|   from s52: Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Desc,NullsDefault))), None, None, None, None, false : Vector[t58<(Int', String', Int', Int', String')>]
|     from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|       right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|       on: Apply Function = : Boolean
|         0: Path s13.PRODUCT_TYPE_ID : Int'
|         1: Path s14.TYPE_ID : Int'
|     select: Pure t58 : Vector[t58<(Int', String', Int', Int', String')>]
|       value: ProductNode : (Int', String', Int', Int', String')
|         1: Path s59._1.PRODUCT_ID : Int'
|         2: Path s59._1.PRODUCT_NAME : String'
|         3: Path s59._1.PRODUCT_PRICE : Int'
|         4: Path s59._1.PRODUCT_QUANTITY : Int'
|         5: Path s59._2.TYPE_NAME : String'
|     where: Apply Function > : Boolean
|       0: Path s59._1.PRODUCT_QUANTITY : Int'
|       1: LiteralNode 0 (volatileHint=false) : Int'
|     orderBy Ordering(Desc,NullsDefault): Path s59._2.TYPE_NAME : String'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s53 : Int'
|     2: Path s52.s54 : String'
|     3: Path s52.s55 : Int'
|     4: Path s52.s56 : Int'
|     5: Path s52.s57 : String'

13:08:34.271 [main] DEBUG slick.compiler.QueryCompiler - After phase removeFieldNames:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Desc,NullsDefault))), None, None, None, None, false : Vector[t58<(Int', String', Int', Int', String')>]
|     from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|       right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|       on: Apply Function = : Boolean
|         0: Path s13.PRODUCT_TYPE_ID : Int'
|         1: Path s14.TYPE_ID : Int'
|     select: Pure t58 : Vector[t58<(Int', String', Int', Int', String')>]
|       value: ProductNode : (Int', String', Int', Int', String')
|         1: Path s59._1.PRODUCT_ID : Int'
|         2: Path s59._1.PRODUCT_NAME : String'
|         3: Path s59._1.PRODUCT_PRICE : Int'
|         4: Path s59._1.PRODUCT_QUANTITY : Int'
|         5: Path s59._2.TYPE_NAME : String'
|     where: Apply Function > : Boolean
|       0: Path s59._1.PRODUCT_QUANTITY : Int'
|       1: LiteralNode 0 (volatileHint=false) : Int'
|     orderBy Ordering(Desc,NullsDefault): Path s59._2.TYPE_NAME : String'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52._1 : Int'
|     2: Path s52._2 : String'
|     3: Path s52._3 : Int'
|     4: Path s52._4 : Int'
|     5: Path s52._5 : String'

13:08:34.275 [main] DEBUG slick.compiler.CodeGen - Compiling server-side and mapping with server-side:
| Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Desc,NullsDefault))), None, None, None, None, false : Vector[t58<(Int', String', Int', Int', String')>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t58 : Vector[t58<(Int', String', Int', Int', String')>]
|     value: ProductNode : (Int', String', Int', Int', String')
|       1: Path s59._1.PRODUCT_ID : Int'
|       2: Path s59._1.PRODUCT_NAME : String'
|       3: Path s59._1.PRODUCT_PRICE : Int'
|       4: Path s59._1.PRODUCT_QUANTITY : Int'
|       5: Path s59._2.TYPE_NAME : String'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'
|   orderBy Ordering(Desc,NullsDefault): Path s59._2.TYPE_NAME : String'

13:08:34.307 [main] DEBUG s.relational.ResultConverterCompiler - Compiled ResultConverter
| ProductResultConverter
|   1: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'
|   2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|   3: BaseResultConverter$mcI$sp idx=3, name=<computed> : Int'
|   4: BaseResultConverter$mcI$sp idx=4, name=<computed> : Int'
|   5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'

13:08:34.308 [main] DEBUG slick.compiler.CodeGen - Compiled server-side to:
| CompiledStatement "select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME` desc" : Vector[t58<(Int', String', Int', Int', String')>]

13:08:34.310 [main] DEBUG slick.compiler.QueryCompiler - After phase codeGen:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: CompiledStatement "select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME` desc" : Vector[t58<(Int', String', Int', Int', String')>]
|   map: CompiledMapping : (Int', String', Int', Int', String')
|     converter: ProductResultConverter
|       1: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'
|       2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|       3: BaseResultConverter$mcI$sp idx=3, name=<computed> : Int'
|       4: BaseResultConverter$mcI$sp idx=4, name=<computed> : Int'
|       5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'

13:08:34.311 [main] DEBUG s.compiler.QueryCompilerBenchmark - ------------------- Phase: Time ---------
13:08:34.318 [main] DEBUG s.compiler.QueryCompilerBenchmark -       assignUniqueSymbols:   18.145984 ms
13:08:34.318 [main] DEBUG s.compiler.QueryCompilerBenchmark -           unrollTailBinds:    1.503061 ms
13:08:34.319 [main] DEBUG s.compiler.QueryCompilerBenchmark -                inferTypes:    7.778976 ms
13:08:34.319 [main] DEBUG s.compiler.QueryCompilerBenchmark -              expandTables:   33.613029 ms
13:08:34.319 [main] DEBUG s.compiler.QueryCompilerBenchmark -           forceOuterBinds:   17.430183 ms
13:08:34.319 [main] DEBUG s.compiler.QueryCompilerBenchmark -         removeMappedTypes:    2.865883 ms
13:08:34.320 [main] DEBUG s.compiler.QueryCompilerBenchmark -                expandSums:    0.811748 ms
13:08:34.320 [main] DEBUG s.compiler.QueryCompilerBenchmark -         emulateOuterJoins:    1.874571 ms
13:08:34.320 [main] DEBUG s.compiler.QueryCompilerBenchmark -             expandRecords:   19.201519 ms
13:08:34.320 [main] DEBUG s.compiler.QueryCompilerBenchmark -        flattenProjections:   56.044580 ms
13:08:34.320 [main] DEBUG s.compiler.QueryCompilerBenchmark -              rewriteJoins:    1.211596 ms
13:08:34.320 [main] DEBUG s.compiler.QueryCompilerBenchmark -             verifySymbols:    2.372513 ms
13:08:34.321 [main] DEBUG s.compiler.QueryCompilerBenchmark -             relabelUnions:    2.787952 ms
13:08:34.321 [main] DEBUG s.compiler.QueryCompilerBenchmark -          createAggregates:    1.144377 ms
13:08:34.321 [main] DEBUG s.compiler.QueryCompilerBenchmark -           resolveZipJoins:    1.686357 ms
13:08:34.321 [main] DEBUG s.compiler.QueryCompilerBenchmark -          pruneProjections:   20.127657 ms
13:08:34.321 [main] DEBUG s.compiler.QueryCompilerBenchmark -           rewriteDistinct:    1.550203 ms
13:08:34.322 [main] DEBUG s.compiler.QueryCompilerBenchmark -    createResultSetMapping:   57.142880 ms
13:08:34.322 [main] DEBUG s.compiler.QueryCompilerBenchmark -            hoistClientOps:   20.280957 ms
13:08:34.322 [main] DEBUG s.compiler.QueryCompilerBenchmark -         reorderOperations:    2.459326 ms
13:08:34.322 [main] DEBUG s.compiler.QueryCompilerBenchmark -     mergeToComprehensions:   57.332558 ms
13:08:34.322 [main] DEBUG s.compiler.QueryCompilerBenchmark -            optimizeScalar:    2.491839 ms
13:08:34.322 [main] DEBUG s.compiler.QueryCompilerBenchmark -          removeFieldNames:   15.327790 ms
13:08:34.323 [main] DEBUG s.compiler.QueryCompilerBenchmark -                   codeGen:   38.806776 ms
13:08:34.323 [main] DEBUG s.compiler.QueryCompilerBenchmark -                     TOTAL:  383.992315 ms
13:08:34.330 [main] DEBUG slick.compiler.QueryCompiler - Source:
| SortBy Ordering(Asc,NullsDefault)
|   from s2: Bind
|     from s3: Filter s4
|       from s4: Join Inner
|         left s5: TableExpansion
|           table s7: Table PRODUCTS
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s7.PRODUCT_ID : Int'
|               2: Path s7.PRODUCT_NAME : String'
|               3: Path s7.PRODUCT_PRICE : Int'
|               4: Path s7.PRODUCT_TYPE_ID : Int'
|               5: Path s7.PRODUCT_QUANTITY : Int'
|         right s6: TableExpansion
|           table s8: Table TYPES
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s8.TYPE_ID : Int'
|               2: Path s8.TYPE_NAME : String'
|         on: Apply Function =
|           0: Path s5.PRODUCT_TYPE_ID : Int'
|           1: Path s6.TYPE_ID : Int'
|       where: Apply Function >
|         0: Path s4._1.PRODUCT_QUANTITY : Int'
|         1: LiteralNode 0 (volatileHint=false) : Int'
|     select: Pure t9
|       value: ProductNode
|         1: Path s3._1.PRODUCT_ID : Int'
|         2: Path s3._1.PRODUCT_NAME : String'
|         3: Path s3._1.PRODUCT_PRICE : Int'
|         4: Path s3._1.PRODUCT_QUANTITY : Int'
|         5: Path s3._2.TYPE_NAME : String'
|   by0: Path s2._5

13:08:34.331 [main] DEBUG slick.compiler.AssignUniqueSymbols - Detected features: UsedFeatures(false,true,false,false)
13:08:34.333 [main] DEBUG slick.compiler.QueryCompiler - After phase assignUniqueSymbols:
| SortBy Ordering(Asc,NullsDefault)
|   from s10: Bind
|     from s11: Filter s12
|       from s12: Join Inner
|         left s13: TableExpansion
|           table s15: Table PRODUCTS
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s15.PRODUCT_ID : Int'
|               2: Path s15.PRODUCT_NAME : String'
|               3: Path s15.PRODUCT_PRICE : Int'
|               4: Path s15.PRODUCT_TYPE_ID : Int'
|               5: Path s15.PRODUCT_QUANTITY : Int'
|         right s14: TableExpansion
|           table s17: Table TYPES
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s17.TYPE_ID : Int'
|               2: Path s17.TYPE_NAME : String'
|         on: Apply Function =
|           0: Path s13.PRODUCT_TYPE_ID : Int'
|           1: Path s14.TYPE_ID : Int'
|       where: Apply Function >
|         0: Path s12._1.PRODUCT_QUANTITY : Int'
|         1: LiteralNode 0 (volatileHint=false) : Int'
|     select: Pure t19
|       value: ProductNode
|         1: Path s11._1.PRODUCT_ID : Int'
|         2: Path s11._1.PRODUCT_NAME : String'
|         3: Path s11._1.PRODUCT_PRICE : Int'
|         4: Path s11._1.PRODUCT_QUANTITY : Int'
|         5: Path s11._2.TYPE_NAME : String'
|   by0: Path s10._5

13:08:34.334 [main] DEBUG slick.compiler.QueryCompiler - After phase unrollTailBinds: (no change)
13:08:34.334 [main] DEBUG slick.compiler.QueryCompiler - After phase inferTypes: (no change)
13:08:34.335 [main] DEBUG slick.compiler.ExpandTables - Found Selects for NominalTypes: @(slick.jdbc.MySQLProfile$._.PRODUCTS), @(slick.jdbc.MySQLProfile$._.TYPES)
13:08:34.338 [main] DEBUG slick.compiler.ExpandTables - With correct table types:
| SortBy Ordering(Asc,NullsDefault) : Vector[t19<(Int', String', Int', Int', String')>]
|   from s10: Bind : Vector[t19<(Int', String', Int', Int', String')>]
|     from s11: Filter s12 : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       from s12: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|         left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|         right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|         on: Apply Function = : Boolean
|           0: Path s13.PRODUCT_TYPE_ID : Int'
|           1: Path s14.TYPE_ID : Int'
|       where: Apply Function > : Boolean
|         0: Path s12._1.PRODUCT_QUANTITY : Int'
|         1: LiteralNode 0 (volatileHint=false) : Int'
|     select: Pure t19 : Vector[t19<(Int', String', Int', Int', String')>]
|       value: ProductNode : (Int', String', Int', Int', String')
|         1: Path s11._1.PRODUCT_ID : Int'
|         2: Path s11._1.PRODUCT_NAME : String'
|         3: Path s11._1.PRODUCT_PRICE : Int'
|         4: Path s11._1.PRODUCT_QUANTITY : Int'
|         5: Path s11._2.TYPE_NAME : String'
|   by0: Path s10._5 : String'

13:08:34.338 [main] DEBUG slick.compiler.ExpandTables - Table expansions: @t18 -> (s17,TypeMapping), @t16 -> (s15,TypeMapping)
13:08:34.340 [main] DEBUG slick.compiler.QueryCompiler - After phase expandTables:
| SortBy Ordering(Asc,NullsDefault) : Vector[t19<(Int', String', Int', Int', String')>]
|   from s10: Bind : Vector[t19<(Int', String', Int', Int', String')>]
|     from s11: Filter s12 : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       from s12: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|         left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|         right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|         on: Apply Function = : Boolean
|           0: Path s13.PRODUCT_TYPE_ID : Int'
|           1: Path s14.TYPE_ID : Int'
|       where: Apply Function > : Boolean
|         0: Path s12._1.PRODUCT_QUANTITY : Int'
|         1: LiteralNode 0 (volatileHint=false) : Int'
|     select: Pure t19 : Vector[t19<(Int', String', Int', Int', String')>]
|       value: ProductNode : (Int', String', Int', Int', String')
|         1: Path s11._1.PRODUCT_ID : Int'
|         2: Path s11._1.PRODUCT_NAME : String'
|         3: Path s11._1.PRODUCT_PRICE : Int'
|         4: Path s11._1.PRODUCT_QUANTITY : Int'
|         5: Path s11._2.TYPE_NAME : String'
|   by0: Path s10._5 : String'

13:08:34.340 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s20 for Table PRODUCTS
13:08:34.340 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s21 for Table TYPES
13:08:34.340 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s22 for Join Inner
13:08:34.341 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s23 for SortBy Ordering(Asc,NullsDefault)
13:08:34.343 [main] DEBUG slick.compiler.QueryCompiler - After phase forceOuterBinds:
| Bind : Vector[t24<t19<(Int', String', Int', Int', String')>>]
|   from s23: SortBy Ordering(Asc,NullsDefault) : Vector[t19<(Int', String', Int', Int', String')>]
|     from s10: Bind : Vector[t19<(Int', String', Int', Int', String')>]
|       from s11: Filter s12 : Vector[t25<(t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)>]
|         from s12: Bind : Vector[t25<(t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)>]
|           from s22: Join Inner : Vector[(t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)]
|             left s13: Bind : Vector[t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>]
|               from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               select: Pure t26 : Vector[t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>]
|                 value: Ref s20 : @t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>
|             right s14: Bind : Vector[t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>]
|               from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               select: Pure t27 : Vector[t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>]
|                 value: Ref s21 : @t18<{TYPE_ID: Int', TYPE_NAME: String'}>
|             on: Apply Function = : Boolean
|               0: Path s13.PRODUCT_TYPE_ID : Int'
|               1: Path s14.TYPE_ID : Int'
|           select: Pure t25 : Vector[t25<(t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)>]
|             value: Ref s22 : (t26<@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>>, t27<@t18<{TYPE_ID: Int', TYPE_NAME: String'}>>)
|         where: Apply Function > : Boolean
|           0: Path s12._1.PRODUCT_QUANTITY : Int'
|           1: LiteralNode 0 (volatileHint=false) : Int'
|       select: Pure t19 : Vector[t19<(Int', String', Int', Int', String')>]
|         value: ProductNode : (Int', String', Int', Int', String')
|           1: Path s11._1.PRODUCT_ID : Int'
|           2: Path s11._1.PRODUCT_NAME : String'
|           3: Path s11._1.PRODUCT_PRICE : Int'
|           4: Path s11._1.PRODUCT_QUANTITY : Int'
|           5: Path s11._2.TYPE_NAME : String'
|     by0: Path s10._5 : String'
|   select: Pure t24 : Vector[t24<t19<(Int', String', Int', Int', String')>>]
|     value: Ref s23 : t19<(Int', String', Int', Int', String')>

13:08:34.344 [main] DEBUG slick.compiler.QueryCompiler - After phase removeMappedTypes: (no change)
13:08:34.344 [main] DEBUG slick.compiler.QueryCompiler - After phase expandSums: (no change)
13:08:34.344 [main] DEBUG slick.compiler.QueryCompiler - After phase emulateOuterJoins: (no change)
13:08:34.348 [main] DEBUG slick.compiler.QueryCompiler - After phase expandRecords:
| Bind : Vector[t24<(Int', String', Int', Int', String')>]
|   from s23: SortBy Ordering(Asc,NullsDefault) : Vector[t19<(Int', String', Int', Int', String')>]
|     from s10: Bind : Vector[t19<(Int', String', Int', Int', String')>]
|       from s11: Filter s12 : Vector[t25<({PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}, {TYPE_ID: Int', TYPE_NAME: String'})>]
|         from s12: Bind : Vector[t25<({PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}, {TYPE_ID: Int', TYPE_NAME: String'})>]
|           from s22: Join Inner : Vector[(t26<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, t27<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|             left s13: Bind : Vector[t26<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               select: Pure t26 : Vector[t26<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|                 value: StructNode : {PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}
|                   PRODUCT_NAME: Path s20.PRODUCT_NAME : String'
|                   PRODUCT_QUANTITY: Path s20.PRODUCT_QUANTITY : Int'
|                   PRODUCT_TYPE_ID: Path s20.PRODUCT_TYPE_ID : Int'
|                   PRODUCT_ID: Path s20.PRODUCT_ID : Int'
|                   PRODUCT_PRICE: Path s20.PRODUCT_PRICE : Int'
|             right s14: Bind : Vector[t27<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               select: Pure t27 : Vector[t27<{TYPE_ID: Int', TYPE_NAME: String'}>]
|                 value: StructNode : {TYPE_ID: Int', TYPE_NAME: String'}
|                   TYPE_ID: Path s21.TYPE_ID : Int'
|                   TYPE_NAME: Path s21.TYPE_NAME : String'
|             on: Apply Function = : Boolean
|               0: Path s13.PRODUCT_TYPE_ID : Int'
|               1: Path s14.TYPE_ID : Int'
|           select: Pure t25 : Vector[t25<({PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}, {TYPE_ID: Int', TYPE_NAME: String'})>]
|             value: ProductNode : ({PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}, {TYPE_ID: Int', TYPE_NAME: String'})
|               1: StructNode : {PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}
|                 PRODUCT_NAME: Path s22._1.PRODUCT_NAME : String'
|                 PRODUCT_QUANTITY: Path s22._1.PRODUCT_QUANTITY : Int'
|                 PRODUCT_TYPE_ID: Path s22._1.PRODUCT_TYPE_ID : Int'
|                 PRODUCT_ID: Path s22._1.PRODUCT_ID : Int'
|                 PRODUCT_PRICE: Path s22._1.PRODUCT_PRICE : Int'
|               2: StructNode : {TYPE_ID: Int', TYPE_NAME: String'}
|                 TYPE_ID: Path s22._2.TYPE_ID : Int'
|                 TYPE_NAME: Path s22._2.TYPE_NAME : String'
|         where: Apply Function > : Boolean
|           0: Path s12._1.PRODUCT_QUANTITY : Int'
|           1: LiteralNode 0 (volatileHint=false) : Int'
|       select: Pure t19 : Vector[t19<(Int', String', Int', Int', String')>]
|         value: ProductNode : (Int', String', Int', Int', String')
|           1: Path s11._1.PRODUCT_ID : Int'
|           2: Path s11._1.PRODUCT_NAME : String'
|           3: Path s11._1.PRODUCT_PRICE : Int'
|           4: Path s11._1.PRODUCT_QUANTITY : Int'
|           5: Path s11._2.TYPE_NAME : String'
|     by0: Path s10._5 : String'
|   select: Pure t24 : Vector[t24<(Int', String', Int', Int', String')>]
|     value: ProductNode : (Int', String', Int', Int', String')
|       1: Path s23._1 : Int'
|       2: Path s23._2 : String'
|       3: Path s23._3 : Int'
|       4: Path s23._4 : Int'
|       5: Path s23._5 : String'

13:08:34.348 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t26
13:08:34.348 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_NAME with symbols 
| Path s20.PRODUCT_NAME : String'

13:08:34.348 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_NAME to:
| Path s20.PRODUCT_NAME

13:08:34.349 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_QUANTITY with symbols 
| Path s20.PRODUCT_QUANTITY : Int'

13:08:34.349 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_QUANTITY to:
| Path s20.PRODUCT_QUANTITY

13:08:34.349 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_TYPE_ID with symbols 
| Path s20.PRODUCT_TYPE_ID : Int'

13:08:34.349 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_TYPE_ID to:
| Path s20.PRODUCT_TYPE_ID

13:08:34.349 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_ID with symbols 
| Path s20.PRODUCT_ID : Int'

13:08:34.349 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_ID to:
| Path s20.PRODUCT_ID

13:08:34.349 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s20.PRODUCT_PRICE with symbols 
| Path s20.PRODUCT_PRICE : Int'

13:08:34.349 [main] DEBUG slick.compiler.FlattenProjections - Translated s20.PRODUCT_PRICE to:
| Path s20.PRODUCT_PRICE

13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| StructNode
|   PRODUCT_NAME: Path s20.PRODUCT_NAME
|   PRODUCT_QUANTITY: Path s20.PRODUCT_QUANTITY
|   PRODUCT_TYPE_ID: Path s20.PRODUCT_TYPE_ID
|   PRODUCT_ID: Path s20.PRODUCT_ID
|   PRODUCT_PRICE: Path s20.PRODUCT_PRICE

13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_NAME
| Path s20.PRODUCT_NAME

13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s28 -> Path s20.PRODUCT_NAME
13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_QUANTITY
| Path s20.PRODUCT_QUANTITY

13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s29 -> Path s20.PRODUCT_QUANTITY
13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_TYPE_ID
| Path s20.PRODUCT_TYPE_ID

13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s30 -> Path s20.PRODUCT_TYPE_ID
13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_ID
| Path s20.PRODUCT_ID

13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s31 -> Path s20.PRODUCT_ID
13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path PRODUCT_PRICE
| Path s20.PRODUCT_PRICE

13:08:34.350 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s32 -> Path s20.PRODUCT_PRICE
13:08:34.351 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t26: (HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28), UnassignedType)
13:08:34.351 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t26
|   value: StructNode
|     s28: Path s20.PRODUCT_NAME
|     s29: Path s20.PRODUCT_QUANTITY
|     s30: Path s20.PRODUCT_TYPE_ID
|     s31: Path s20.PRODUCT_ID
|     s32: Path s20.PRODUCT_PRICE

13:08:34.351 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t27
13:08:34.351 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s21.TYPE_ID with symbols t26
| Path s21.TYPE_ID : Int'

13:08:34.351 [main] DEBUG slick.compiler.FlattenProjections - Translated s21.TYPE_ID to:
| Path s21.TYPE_ID

13:08:34.351 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s21.TYPE_NAME with symbols t26
| Path s21.TYPE_NAME : String'

13:08:34.351 [main] DEBUG slick.compiler.FlattenProjections - Translated s21.TYPE_NAME to:
| Path s21.TYPE_NAME

13:08:34.352 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| StructNode
|   TYPE_ID: Path s21.TYPE_ID
|   TYPE_NAME: Path s21.TYPE_NAME

13:08:34.352 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path TYPE_ID
| Path s21.TYPE_ID

13:08:34.352 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s33 -> Path s21.TYPE_ID
13:08:34.352 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path TYPE_NAME
| Path s21.TYPE_NAME

13:08:34.352 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s34 -> Path s21.TYPE_NAME
13:08:34.352 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t27: (Map(List(TYPE_NAME) -> s34, List(TYPE_ID) -> s33), UnassignedType)
13:08:34.352 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t27
|   value: StructNode
|     s33: Path s21.TYPE_ID
|     s34: Path s21.TYPE_NAME

13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s13.PRODUCT_TYPE_ID with symbols t26, t27
| Path s13.PRODUCT_TYPE_ID : Int'

13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections - Found s13.PRODUCT_TYPE_ID with local part Path PRODUCT_TYPE_ID over t26
13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections - Translated s13.PRODUCT_TYPE_ID to:
| Path s13.s30

13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s14.TYPE_ID with symbols t26, t27
| Path s14.TYPE_ID : Int'

13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections - Found s14.TYPE_ID with local part Path TYPE_ID over t27
13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t27: Map(List(TYPE_NAME) -> s34, List(TYPE_ID) -> s33)
13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections - Translated s14.TYPE_ID to:
| Path s14.s33

13:08:34.353 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t25
13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_NAME with symbols t26, t27
| Path s22._1.PRODUCT_NAME : String'

13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_NAME with local part Path PRODUCT_NAME over t26
13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_NAME to:
| Path s22._1.s28

13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_QUANTITY with symbols t26, t27
| Path s22._1.PRODUCT_QUANTITY : Int'

13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_QUANTITY with local part Path PRODUCT_QUANTITY over t26
13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_QUANTITY to:
| Path s22._1.s29

13:08:34.354 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_TYPE_ID with symbols t26, t27
| Path s22._1.PRODUCT_TYPE_ID : Int'

13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_TYPE_ID with local part Path PRODUCT_TYPE_ID over t26
13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_TYPE_ID to:
| Path s22._1.s30

13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_ID with symbols t26, t27
| Path s22._1.PRODUCT_ID : Int'

13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_ID with local part Path PRODUCT_ID over t26
13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_ID to:
| Path s22._1.s31

13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._1.PRODUCT_PRICE with symbols t26, t27
| Path s22._1.PRODUCT_PRICE : Int'

13:08:34.355 [main] DEBUG slick.compiler.FlattenProjections - Found s22._1.PRODUCT_PRICE with local part Path PRODUCT_PRICE over t26
13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t26: HashMap(List(PRODUCT_ID) -> s31, List(PRODUCT_PRICE) -> s32, List(PRODUCT_QUANTITY) -> s29, List(PRODUCT_TYPE_ID) -> s30, List(PRODUCT_NAME) -> s28)
13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._1.PRODUCT_PRICE to:
| Path s22._1.s32

13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._2.TYPE_ID with symbols t26, t27
| Path s22._2.TYPE_ID : Int'

13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections - Found s22._2.TYPE_ID with local part Path TYPE_ID over t27
13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t27: Map(List(TYPE_NAME) -> s34, List(TYPE_ID) -> s33)
13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._2.TYPE_ID to:
| Path s22._2.s33

13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s22._2.TYPE_NAME with symbols t26, t27
| Path s22._2.TYPE_NAME : String'

13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections - Found s22._2.TYPE_NAME with local part Path TYPE_NAME over t27
13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t27: Map(List(TYPE_NAME) -> s34, List(TYPE_ID) -> s33)
13:08:34.356 [main] DEBUG slick.compiler.FlattenProjections - Translated s22._2.TYPE_NAME to:
| Path s22._2.s34

13:08:34.357 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| ProductNode
|   1: StructNode
|     PRODUCT_NAME: Path s22._1.s28
|     PRODUCT_QUANTITY: Path s22._1.s29
|     PRODUCT_TYPE_ID: Path s22._1.s30
|     PRODUCT_ID: Path s22._1.s31
|     PRODUCT_PRICE: Path s22._1.s32
|   2: StructNode
|     TYPE_ID: Path s22._2.s33
|     TYPE_NAME: Path s22._2.s34

13:08:34.357 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1
| StructNode
|   PRODUCT_NAME: Path s22._1.s28
|   PRODUCT_QUANTITY: Path s22._1.s29
|   PRODUCT_TYPE_ID: Path s22._1.s30
|   PRODUCT_ID: Path s22._1.s31
|   PRODUCT_PRICE: Path s22._1.s32

13:08:34.357 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_NAME
| Path s22._1.s28

13:08:34.357 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s35 -> Path s22._1.s28
13:08:34.357 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_QUANTITY
| Path s22._1.s29

13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s36 -> Path s22._1.s29
13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_TYPE_ID
| Path s22._1.s30

13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s37 -> Path s22._1.s30
13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_ID
| Path s22._1.s31

13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s38 -> Path s22._1.s31
13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1.PRODUCT_PRICE
| Path s22._1.s32

13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s39 -> Path s22._1.s32
13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2
| StructNode
|   TYPE_ID: Path s22._2.s33
|   TYPE_NAME: Path s22._2.s34

13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2.TYPE_ID
| Path s22._2.s33

13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s40 -> Path s22._2.s33
13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2.TYPE_NAME
| Path s22._2.s34

13:08:34.358 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s41 -> Path s22._2.s34
13:08:34.359 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t25: (HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41), UnassignedType)
13:08:34.359 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t25
|   value: StructNode
|     s35: Path s22._1.s28
|     s36: Path s22._1.s29
|     s37: Path s22._1.s30
|     s38: Path s22._1.s31
|     s39: Path s22._1.s32
|     s40: Path s22._2.s33
|     s41: Path s22._2.s34

13:08:34.359 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s12._1.PRODUCT_QUANTITY with symbols t26, t25, t27
| Path s12._1.PRODUCT_QUANTITY : Int'

13:08:34.359 [main] DEBUG slick.compiler.FlattenProjections - Found s12._1.PRODUCT_QUANTITY with local part Path _1.PRODUCT_QUANTITY over t25
13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections - Translated s12._1.PRODUCT_QUANTITY to:
| Path s12.s36

13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t19
13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._1.PRODUCT_ID with symbols t26, t25, t27
| Path s11._1.PRODUCT_ID : Int'

13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections - Found s11._1.PRODUCT_ID with local part Path _1.PRODUCT_ID over t25
13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._1.PRODUCT_ID to:
| Path s11.s38

13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._1.PRODUCT_NAME with symbols t26, t25, t27
| Path s11._1.PRODUCT_NAME : String'

13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections - Found s11._1.PRODUCT_NAME with local part Path _1.PRODUCT_NAME over t25
13:08:34.360 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._1.PRODUCT_NAME to:
| Path s11.s35

13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._1.PRODUCT_PRICE with symbols t26, t25, t27
| Path s11._1.PRODUCT_PRICE : Int'

13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections - Found s11._1.PRODUCT_PRICE with local part Path _1.PRODUCT_PRICE over t25
13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._1.PRODUCT_PRICE to:
| Path s11.s39

13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._1.PRODUCT_QUANTITY with symbols t26, t25, t27
| Path s11._1.PRODUCT_QUANTITY : Int'

13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections - Found s11._1.PRODUCT_QUANTITY with local part Path _1.PRODUCT_QUANTITY over t25
13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.361 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._1.PRODUCT_QUANTITY to:
| Path s11.s36

13:08:34.362 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s11._2.TYPE_NAME with symbols t26, t25, t27
| Path s11._2.TYPE_NAME : String'

13:08:34.362 [main] DEBUG slick.compiler.FlattenProjections - Found s11._2.TYPE_NAME with local part Path _2.TYPE_NAME over t25
13:08:34.362 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t25: HashMap(List(PRODUCT_TYPE_ID, _1) -> s37, List(TYPE_ID, _2) -> s40, List(PRODUCT_NAME, _1) -> s35, List(PRODUCT_ID, _1) -> s38, List(PRODUCT_QUANTITY, _1) -> s36, List(PRODUCT_PRICE, _1) -> s39, List(TYPE_NAME, _2) -> s41)
13:08:34.362 [main] DEBUG slick.compiler.FlattenProjections - Translated s11._2.TYPE_NAME to:
| Path s11.s41

13:08:34.362 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| ProductNode
|   1: Path s11.s38
|   2: Path s11.s35
|   3: Path s11.s39
|   4: Path s11.s36
|   5: Path s11.s41

13:08:34.362 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1
| Path s11.s38

13:08:34.362 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s42 -> Path s11.s38
13:08:34.362 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2
| Path s11.s35

13:08:34.363 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s43 -> Path s11.s35
13:08:34.363 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _3
| Path s11.s39

13:08:34.363 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s44 -> Path s11.s39
13:08:34.363 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _4
| Path s11.s36

13:08:34.363 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s45 -> Path s11.s36
13:08:34.363 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _5
| Path s11.s41

13:08:34.363 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s46 -> Path s11.s41
13:08:34.363 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t19: (HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44), UnassignedType)
13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t19
|   value: StructNode
|     s42: Path s11.s38
|     s43: Path s11.s35
|     s44: Path s11.s39
|     s45: Path s11.s36
|     s46: Path s11.s41

13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s10._5 with symbols t26, t25, t27, t19
| Path s10._5 : String'

13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Found s10._5 with local part Path _5 over t19
13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Translated s10._5 to:
| Path s10.s46

13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t24
13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._1 with symbols t26, t25, t27, t19
| Path s23._1 : Int'

13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Found s23._1 with local part Path _1 over t19
13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._1 to:
| Path s23.s42

13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._2 with symbols t26, t25, t27, t19
| Path s23._2 : String'

13:08:34.364 [main] DEBUG slick.compiler.FlattenProjections - Found s23._2 with local part Path _2 over t19
13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._2 to:
| Path s23.s43

13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._3 with symbols t26, t25, t27, t19
| Path s23._3 : Int'

13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Found s23._3 with local part Path _3 over t19
13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._3 to:
| Path s23.s44

13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._4 with symbols t26, t25, t27, t19
| Path s23._4 : Int'

13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Found s23._4 with local part Path _4 over t19
13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._4 to:
| Path s23.s45

13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s23._5 with symbols t26, t25, t27, t19
| Path s23._5 : String'

13:08:34.365 [main] DEBUG slick.compiler.FlattenProjections - Found s23._5 with local part Path _5 over t19
13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: HashMap(List(_5) -> s46, List(_2) -> s43, List(_4) -> s45, List(_1) -> s42, List(_3) -> s44)
13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections - Translated s23._5 to:
| Path s23.s46

13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| ProductNode
|   1: Path s23.s42
|   2: Path s23.s43
|   3: Path s23.s44
|   4: Path s23.s45
|   5: Path s23.s46

13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1
| Path s23.s42

13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s47 -> Path s23.s42
13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2
| Path s23.s43

13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s48 -> Path s23.s43
13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _3
| Path s23.s44

13:08:34.366 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s49 -> Path s23.s44
13:08:34.367 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _4
| Path s23.s45

13:08:34.367 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s50 -> Path s23.s45
13:08:34.367 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _5
| Path s23.s46

13:08:34.367 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s51 -> Path s23.s46
13:08:34.367 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t24: (HashMap(List(_5) -> s51, List(_2) -> s48, List(_4) -> s50, List(_1) -> s47, List(_3) -> s49), UnassignedType)
13:08:34.367 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t24
|   value: StructNode
|     s47: Path s23.s42
|     s48: Path s23.s43
|     s49: Path s23.s44
|     s50: Path s23.s45
|     s51: Path s23.s46

13:08:34.371 [main] DEBUG slick.compiler.QueryCompiler - After phase flattenProjections:
| Bind : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|   from s23: SortBy Ordering(Asc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     from s10: Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|       from s11: Filter s12 : Vector[t25<{s35: String', s36: Int', s37: Int', s38: Int', s39: Int', s40: Int', s41: String'}>]
|         from s12: Bind : Vector[t25<{s35: String', s36: Int', s37: Int', s38: Int', s39: Int', s40: Int', s41: String'}>]
|           from s22: Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|             left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|               from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                 value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|                   s28: Path s20.PRODUCT_NAME : String'
|                   s29: Path s20.PRODUCT_QUANTITY : Int'
|                   s30: Path s20.PRODUCT_TYPE_ID : Int'
|                   s31: Path s20.PRODUCT_ID : Int'
|                   s32: Path s20.PRODUCT_PRICE : Int'
|             right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|               from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|                 value: StructNode : {s33: Int', s34: String'}
|                   s33: Path s21.TYPE_ID : Int'
|                   s34: Path s21.TYPE_NAME : String'
|             on: Apply Function = : Boolean
|               0: Path s13.s30 : Int'
|               1: Path s14.s33 : Int'
|           select: Pure t25 : Vector[t25<{s35: String', s36: Int', s37: Int', s38: Int', s39: Int', s40: Int', s41: String'}>]
|             value: StructNode : {s35: String', s36: Int', s37: Int', s38: Int', s39: Int', s40: Int', s41: String'}
|               s35: Path s22._1.s28 : String'
|               s36: Path s22._1.s29 : Int'
|               s37: Path s22._1.s30 : Int'
|               s38: Path s22._1.s31 : Int'
|               s39: Path s22._1.s32 : Int'
|               s40: Path s22._2.s33 : Int'
|               s41: Path s22._2.s34 : String'
|         where: Apply Function > : Boolean
|           0: Path s12.s36 : Int'
|           1: LiteralNode 0 (volatileHint=false) : Int'
|       select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|         value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|           s42: Path s11.s38 : Int'
|           s43: Path s11.s35 : String'
|           s44: Path s11.s39 : Int'
|           s45: Path s11.s36 : Int'
|           s46: Path s11.s41 : String'
|     by0: Path s10.s46 : String'
|   select: Pure t24 : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|     value: StructNode : {s47: Int', s48: String', s49: Int', s50: Int', s51: String'}
|       s47: Path s23.s42 : Int'
|       s48: Path s23.s43 : String'
|       s49: Path s23.s44 : Int'
|       s50: Path s23.s45 : Int'
|       s51: Path s23.s46 : String'

13:08:34.371 [main] DEBUG slick.compiler.QueryCompiler - After phase rewriteJoins: (no change)
13:08:34.372 [main] DEBUG slick.compiler.QueryCompiler - After phase verifySymbols: (no change)
13:08:34.372 [main] DEBUG slick.compiler.QueryCompiler - After phase relabelUnions: (no change)
13:08:34.372 [main] DEBUG slick.compiler.QueryCompiler - After phase createAggregates: (no change)
13:08:34.372 [main] DEBUG slick.compiler.QueryCompiler - After phase resolveZipJoins: (no change)
13:08:34.374 [main] DEBUG slick.compiler.PruneProjections - Unreferenced: t24; Field refs: (t26,s32), (@t16,PRODUCT_NAME), (t26,s28), (t19,s42), (@t18,TYPE_NAME), (@t16,PRODUCT_TYPE_ID), (t27,s34), (t25,s36), (@t16,PRODUCT_ID), (t19,s46), (@t16,PRODUCT_PRICE), (t27,s33), (t19,s43), (t25,s41), (t25,s35), (@t16,PRODUCT_QUANTITY), (t25,s39), (t26,s30), (t26,s31), (@t18,TYPE_ID), (t25,s38), (t19,s45), (t26,s29), (t19,s44)
13:08:34.377 [main] DEBUG slick.compiler.QueryCompiler - After phase pruneProjections:
| Bind : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|   from s23: SortBy Ordering(Asc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     from s10: Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|       from s11: Filter s12 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|         from s12: Bind : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|           from s22: Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|             left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|               from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|               select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                 value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|                   s28: Path s20.PRODUCT_NAME : String'
|                   s29: Path s20.PRODUCT_QUANTITY : Int'
|                   s30: Path s20.PRODUCT_TYPE_ID : Int'
|                   s31: Path s20.PRODUCT_ID : Int'
|                   s32: Path s20.PRODUCT_PRICE : Int'
|             right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|               from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|               select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|                 value: StructNode : {s33: Int', s34: String'}
|                   s33: Path s21.TYPE_ID : Int'
|                   s34: Path s21.TYPE_NAME : String'
|             on: Apply Function = : Boolean
|               0: Path s13.s30 : Int'
|               1: Path s14.s33 : Int'
|           select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|             value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|               s35: Path s22._1.s28 : String'
|               s36: Path s22._1.s29 : Int'
|               s38: Path s22._1.s31 : Int'
|               s39: Path s22._1.s32 : Int'
|               s41: Path s22._2.s34 : String'
|         where: Apply Function > : Boolean
|           0: Path s12.s36 : Int'
|           1: LiteralNode 0 (volatileHint=false) : Int'
|       select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|         value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|           s42: Path s11.s38 : Int'
|           s43: Path s11.s35 : String'
|           s44: Path s11.s39 : Int'
|           s45: Path s11.s36 : Int'
|           s46: Path s11.s41 : String'
|     by0: Path s10.s46 : String'
|   select: Pure t24 : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|     value: StructNode : {s47: Int', s48: String', s49: Int', s50: Int', s51: String'}
|       s47: Path s23.s42 : Int'
|       s48: Path s23.s43 : String'
|       s49: Path s23.s44 : Int'
|       s50: Path s23.s45 : Int'
|       s51: Path s23.s46 : String'

13:08:34.377 [main] DEBUG slick.compiler.RewriteDistinct - No DISTINCT used as determined by assignUniqueSymbols - skipping phase
13:08:34.377 [main] DEBUG slick.compiler.QueryCompiler - After phase rewriteDistinct: (no change)
13:08:34.377 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from t24<t19<(Int', String', Int', Int', String')>>
13:08:34.377 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from Int'
13:08:34.377 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from String'
13:08:34.377 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from Int'
13:08:34.377 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from Int'
13:08:34.377 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from String'
13:08:34.380 [main] DEBUG slick.compiler.QueryCompiler - After phase createResultSetMapping:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Bind : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|     from s23: SortBy Ordering(Asc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|       from s10: Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|         from s11: Filter s12 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|           from s12: Bind : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|             from s22: Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|               left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                 from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|                 select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                   value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|                     s28: Path s20.PRODUCT_NAME : String'
|                     s29: Path s20.PRODUCT_QUANTITY : Int'
|                     s30: Path s20.PRODUCT_TYPE_ID : Int'
|                     s31: Path s20.PRODUCT_ID : Int'
|                     s32: Path s20.PRODUCT_PRICE : Int'
|               right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|                 from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|                 select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|                   value: StructNode : {s33: Int', s34: String'}
|                     s33: Path s21.TYPE_ID : Int'
|                     s34: Path s21.TYPE_NAME : String'
|               on: Apply Function = : Boolean
|                 0: Path s13.s30 : Int'
|                 1: Path s14.s33 : Int'
|             select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|               value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|                 s35: Path s22._1.s28 : String'
|                 s36: Path s22._1.s29 : Int'
|                 s38: Path s22._1.s31 : Int'
|                 s39: Path s22._1.s32 : Int'
|                 s41: Path s22._2.s34 : String'
|           where: Apply Function > : Boolean
|             0: Path s12.s36 : Int'
|             1: LiteralNode 0 (volatileHint=false) : Int'
|         select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|           value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|             s42: Path s11.s38 : Int'
|             s43: Path s11.s35 : String'
|             s44: Path s11.s39 : Int'
|             s45: Path s11.s36 : Int'
|             s46: Path s11.s41 : String'
|       by0: Path s10.s46 : String'
|     select: Pure t24 : Vector[t24<{s47: Int', s48: String', s49: Int', s50: Int', s51: String'}>]
|       value: StructNode : {s47: Int', s48: String', s49: Int', s50: Int', s51: String'}
|         s47: Path s23.s42 : Int'
|         s48: Path s23.s43 : String'
|         s49: Path s23.s44 : Int'
|         s50: Path s23.s45 : Int'
|         s51: Path s23.s46 : String'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s47 : Int'
|     2: Path s52.s48 : String'
|     3: Path s52.s49 : Int'
|     4: Path s52.s50 : Int'
|     5: Path s52.s51 : String'

13:08:34.380 [main] DEBUG slick.compiler.HoistClientOps - Hoisting operations from defs: 
13:08:34.380 [main] DEBUG slick.compiler.HoistClientOps - New defs: HashMap(0 -> (Path s23.s42,s53), 1 -> (Path s23.s43,s54), 2 -> (Path s23.s44,s55), 3 -> (Path s23.s45,s56), 4 -> (Path s23.s46,s57))
13:08:34.382 [main] DEBUG slick.compiler.HoistClientOps - New ResultSetMapping:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Bind : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     from s23: ...
|     select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|       value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|         s53: Path s23.s42 : Int'
|         s55: Path s23.s44 : Int'
|         s54: Path s23.s43 : String'
|         s57: Path s23.s46 : String'
|         s56: Path s23.s45 : Int'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s53 : Int'
|     2: Path s52.s54 : String'
|     3: Path s52.s55 : Int'
|     4: Path s52.s56 : Int'
|     5: Path s52.s57 : String'

13:08:34.384 [main] DEBUG slick.compiler.QueryCompiler - After phase hoistClientOps:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Bind : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     from s23: SortBy Ordering(Asc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|       from s10: Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|         from s11: Filter s12 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|           from s12: Bind : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|             from s22: Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|               left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                 from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|                 select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|                   value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|                     s28: Path s20.PRODUCT_NAME : String'
|                     s29: Path s20.PRODUCT_QUANTITY : Int'
|                     s30: Path s20.PRODUCT_TYPE_ID : Int'
|                     s31: Path s20.PRODUCT_ID : Int'
|                     s32: Path s20.PRODUCT_PRICE : Int'
|               right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|                 from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|                 select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|                   value: StructNode : {s33: Int', s34: String'}
|                     s33: Path s21.TYPE_ID : Int'
|                     s34: Path s21.TYPE_NAME : String'
|               on: Apply Function = : Boolean
|                 0: Path s13.s30 : Int'
|                 1: Path s14.s33 : Int'
|             select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|               value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|                 s35: Path s22._1.s28 : String'
|                 s36: Path s22._1.s29 : Int'
|                 s38: Path s22._1.s31 : Int'
|                 s39: Path s22._1.s32 : Int'
|                 s41: Path s22._2.s34 : String'
|           where: Apply Function > : Boolean
|             0: Path s12.s36 : Int'
|             1: LiteralNode 0 (volatileHint=false) : Int'
|         select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|           value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|             s42: Path s11.s38 : Int'
|             s43: Path s11.s35 : String'
|             s44: Path s11.s39 : Int'
|             s45: Path s11.s36 : Int'
|             s46: Path s11.s41 : String'
|       by0: Path s10.s46 : String'
|     select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|       value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|         s53: Path s23.s42 : Int'
|         s55: Path s23.s44 : Int'
|         s54: Path s23.s43 : String'
|         s57: Path s23.s46 : String'
|         s56: Path s23.s45 : Int'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s53 : Int'
|     2: Path s52.s54 : String'
|     3: Path s52.s55 : Int'
|     4: Path s52.s56 : Int'
|     5: Path s52.s57 : String'

13:08:34.385 [main] DEBUG slick.compiler.QueryCompiler - After phase reorderOperations: (no change)
13:08:34.385 [main] DEBUG slick.compiler.MergeToComprehensions - Table fields: MapView(<not computed>)
13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from Join s13/s14:
| Join Inner : Vector[(t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>, t27<{s33: Int', s34: String'}>)]
|   left s13: Bind : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|     from s20: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     select: Pure t26 : Vector[t26<{s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}>]
|       value: StructNode : {s28: String', s29: Int', s30: Int', s31: Int', s32: Int'}
|         s28: Path s20.PRODUCT_NAME : String'
|         s29: Path s20.PRODUCT_QUANTITY : Int'
|         s30: Path s20.PRODUCT_TYPE_ID : Int'
|         s31: Path s20.PRODUCT_ID : Int'
|         s32: Path s20.PRODUCT_PRICE : Int'
|   right s14: Bind : Vector[t27<{s33: Int', s34: String'}>]
|     from s21: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     select: Pure t27 : Vector[t27<{s33: Int', s34: String'}>]
|       value: StructNode : {s33: Int', s34: String'}
|         s33: Path s21.TYPE_ID : Int'
|         s34: Path s21.TYPE_NAME : String'
|   on: Apply Function = : Boolean
|     0: Path s13.s30 : Int'
|     1: Path s14.s33 : Int'

13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Bind from s20 is aliasing: true
13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from TableNode:
| Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]

13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((@t16,PRODUCT_NAME),List(PRODUCT_NAME)), ((@t16,PRODUCT_QUANTITY),List(PRODUCT_QUANTITY)), ((@t16,PRODUCT_TYPE_ID),List(PRODUCT_TYPE_ID)), ((@t16,PRODUCT_ID),List(PRODUCT_ID)), ((@t16,PRODUCT_PRICE),List(PRODUCT_PRICE)))
13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Recombining aliasing Bind mappings ConstArray((s28,Path s20.PRODUCT_NAME), (s29,Path s20.PRODUCT_QUANTITY), (s30,Path s20.PRODUCT_TYPE_ID), (s31,Path s20.PRODUCT_ID), (s32,Path s20.PRODUCT_PRICE))
13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Bind from s21 is aliasing: true
13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from TableNode:
| Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]

13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((@t18,TYPE_ID),List(TYPE_ID)), ((@t18,TYPE_NAME),List(TYPE_NAME)))
13:08:34.386 [main] DEBUG slick.compiler.MergeToComprehensions - Recombining aliasing Bind mappings ConstArray((s33,Path s21.TYPE_ID), (s34,Path s21.TYPE_NAME))
13:08:34.387 [main] DEBUG slick.compiler.MergeToComprehensions - Converted left side of Join s13/s14:
| Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]

13:08:34.387 [main] DEBUG slick.compiler.MergeToComprehensions - Converted right side of Join s13/s14:
| Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]

13:08:34.387 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings for `on` clause in Join s13/s14: HashMap((t26,s30) -> List(_1, PRODUCT_TYPE_ID), (t26,s32) -> List(_1, PRODUCT_PRICE), (t26,s28) -> List(_1, PRODUCT_NAME), (t27,s34) -> List(_2, TYPE_NAME), (t26,s31) -> List(_1, PRODUCT_ID), (t27,s33) -> List(_2, TYPE_ID), (t26,s29) -> List(_1, PRODUCT_QUANTITY))
13:08:34.387 [main] DEBUG slick.compiler.MergeToComprehensions - Transformed `on` clause in Join s13/s14:
| Apply Function = : Boolean
|   0: Path s13.PRODUCT_TYPE_ID : Int'
|   1: Path s14.TYPE_ID : Int'

13:08:34.387 [main] DEBUG slick.compiler.MergeToComprehensions - Created source from Join s13/s14:
| Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|   left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|   right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|   on: Apply Function = : Boolean
|     0: Path s13.PRODUCT_TYPE_ID : Int'
|     1: Path s14.TYPE_ID : Int'

13:08:34.388 [main] DEBUG slick.compiler.MergeToComprehensions - Building new Comprehension from:
| Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|   left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|   right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|   on: Apply Function = : Boolean
|     0: Path s13.PRODUCT_TYPE_ID : Int'
|     1: Path s14.TYPE_ID : Int'

13:08:34.389 [main] DEBUG slick.compiler.MergeToComprehensions - Built new Comprehension:
| Comprehension s59, None, None, ConstArray(), None, None, None, None, false : Vector[t60<{s61: String', s62: Int', s63: Int', s64: Int', s65: Int', s66: Int', s67: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t60 : Vector[t60<{s61: String', s62: Int', s63: Int', s64: Int', s65: Int', s66: Int', s67: String'}>]
|     value: StructNode : {s61: String', s62: Int', s63: Int', s64: Int', s65: Int', s66: Int', s67: String'}
|       s61: Path s59._1.PRODUCT_NAME : String'
|       s62: Path s59._1.PRODUCT_QUANTITY : Int'
|       s63: Path s59._1.PRODUCT_TYPE_ID : Int'
|       s64: Path s59._1.PRODUCT_ID : Int'
|       s65: Path s59._1.PRODUCT_PRICE : Int'
|       s66: Path s59._2.TYPE_ID : Int'
|       s67: Path s59._2.TYPE_NAME : String'

13:08:34.389 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: HashMap((t26,s30) -> s63, (t26,s32) -> s65, (t26,s28) -> s61, (t27,s34) -> s67, (t26,s31) -> s64, (t27,s33) -> s66, (t26,s29) -> s62)
13:08:34.390 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|   from s22: ...
|   select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|     value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|       s35: Path s22._1.s28 : String'
|       s36: Path s22._1.s29 : Int'
|       s38: Path s22._1.s31 : Int'
|       s39: Path s22._1.s32 : Int'
|       s41: Path s22._2.s34 : String'

13:08:34.391 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Bind into Comprehension as 'select':
| Comprehension s59, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|     value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|       s35: Path s59._1.PRODUCT_NAME : String'
|       s36: Path s59._1.PRODUCT_QUANTITY : Int'
|       s38: Path s59._1.PRODUCT_ID : Int'
|       s39: Path s59._1.PRODUCT_PRICE : Int'
|       s41: Path s59._2.TYPE_NAME : String'

13:08:34.391 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: HashMap((t25,s39) -> s39, (t25,s36) -> s36, (t25,s38) -> s38, (t25,s41) -> s41, (t25,s35) -> s35)
13:08:34.392 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Filter into Comprehension:
| Filter s12 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|   from s12: ...
|   where: Apply Function > : Boolean
|     0: Path s12.s36 : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'

13:08:34.393 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Filter into Comprehension:
| Comprehension s59, Some(Apply Function >), None, ConstArray(), None, None, None, None, false : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t25 : Vector[t25<{s35: String', s36: Int', s38: Int', s39: Int', s41: String'}>]
|     value: StructNode : {s35: String', s36: Int', s38: Int', s39: Int', s41: String'}
|       s35: Path s59._1.PRODUCT_NAME : String'
|       s36: Path s59._1.PRODUCT_QUANTITY : Int'
|       s38: Path s59._1.PRODUCT_ID : Int'
|       s39: Path s59._1.PRODUCT_PRICE : Int'
|       s41: Path s59._2.TYPE_NAME : String'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'

13:08:34.393 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|   from s11: ...
|   select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|       s42: Path s11.s38 : Int'
|       s43: Path s11.s35 : String'
|       s44: Path s11.s39 : Int'
|       s45: Path s11.s36 : Int'
|       s46: Path s11.s41 : String'

13:08:34.395 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Bind into Comprehension as 'select':
| Comprehension s59, Some(Apply Function >), None, ConstArray(), None, None, None, None, false : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|       s42: Path s59._1.PRODUCT_ID : Int'
|       s43: Path s59._1.PRODUCT_NAME : String'
|       s44: Path s59._1.PRODUCT_PRICE : Int'
|       s45: Path s59._1.PRODUCT_QUANTITY : Int'
|       s46: Path s59._2.TYPE_NAME : String'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'

13:08:34.395 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: HashMap((t19,s42) -> s42, (t19,s45) -> s45, (t19,s46) -> s46, (t19,s44) -> s44, (t19,s43) -> s43)
13:08:34.395 [main] DEBUG slick.compiler.MergeToComprehensions - Merging SortBy into Comprehension:
| SortBy Ordering(Asc,NullsDefault) : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|   from s10: ...
|   by0: Path s10.s46 : String'

13:08:34.396 [main] DEBUG slick.compiler.MergeToComprehensions - Merged SortBy into Comprehension:
| Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t19 : Vector[t19<{s42: Int', s43: String', s44: Int', s45: Int', s46: String'}>]
|     value: StructNode : {s42: Int', s43: String', s44: Int', s45: Int', s46: String'}
|       s42: Path s59._1.PRODUCT_ID : Int'
|       s43: Path s59._1.PRODUCT_NAME : String'
|       s44: Path s59._1.PRODUCT_PRICE : Int'
|       s45: Path s59._1.PRODUCT_QUANTITY : Int'
|       s46: Path s59._2.TYPE_NAME : String'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'
|   orderBy Ordering(Asc,NullsDefault): Path s59._2.TYPE_NAME : String'

13:08:34.397 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Bind into Comprehension as 'select':
| Bind : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|   from s23: ...
|   select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|       s53: Path s23.s42 : Int'
|       s55: Path s23.s44 : Int'
|       s54: Path s23.s43 : String'
|       s57: Path s23.s46 : String'
|       s56: Path s23.s45 : Int'

13:08:34.398 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Bind into Comprehension as 'select':
| Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|       s53: Path s59._1.PRODUCT_ID : Int'
|       s55: Path s59._1.PRODUCT_PRICE : Int'
|       s54: Path s59._1.PRODUCT_NAME : String'
|       s57: Path s59._2.TYPE_NAME : String'
|       s56: Path s59._1.PRODUCT_QUANTITY : Int'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'
|   orderBy Ordering(Asc,NullsDefault): Path s59._2.TYPE_NAME : String'

13:08:34.399 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: HashMap((t58,s55) -> s55, (t58,s53) -> s53, (t58,s54) -> s54, (t58,s56) -> s56, (t58,s57) -> s57)
13:08:34.399 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((t58,s55),List(s55)), ((t58,s53),List(s53)), ((t58,s54),List(s54)), ((t58,s56),List(s56)), ((t58,s57),List(s57)))
13:08:34.400 [main] DEBUG slick.compiler.QueryCompiler - After phase mergeToComprehensions:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|     from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|       right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|       on: Apply Function = : Boolean
|         0: Path s13.PRODUCT_TYPE_ID : Int'
|         1: Path s14.TYPE_ID : Int'
|     select: Pure t58 : Vector[t58<{s53: Int', s55: Int', s54: String', s57: String', s56: Int'}>]
|       value: StructNode : {s53: Int', s55: Int', s54: String', s57: String', s56: Int'}
|         s53: Path s59._1.PRODUCT_ID : Int'
|         s55: Path s59._1.PRODUCT_PRICE : Int'
|         s54: Path s59._1.PRODUCT_NAME : String'
|         s57: Path s59._2.TYPE_NAME : String'
|         s56: Path s59._1.PRODUCT_QUANTITY : Int'
|     where: Apply Function > : Boolean
|       0: Path s59._1.PRODUCT_QUANTITY : Int'
|       1: LiteralNode 0 (volatileHint=false) : Int'
|     orderBy Ordering(Asc,NullsDefault): Path s59._2.TYPE_NAME : String'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s53 : Int'
|     2: Path s52.s54 : String'
|     3: Path s52.s55 : Int'
|     4: Path s52.s56 : Int'
|     5: Path s52.s57 : String'

13:08:34.400 [main] DEBUG slick.compiler.QueryCompiler - After phase optimizeScalar: (no change)
13:08:34.400 [main] DEBUG slick.compiler.RemoveFieldNames - Required symbols: s53 -> 0, s55 -> 2, s54 -> 1, s57 -> 4, s56 -> 3
13:08:34.402 [main] DEBUG slick.compiler.RemoveFieldNames - Transformed RSM: 
| ResultSetMapping
|   from s52: Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t58<(Int', String', Int', Int', String')>]
|     from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|       right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|       on: Apply Function = : Boolean
|         0: Path s13.PRODUCT_TYPE_ID : Int'
|         1: Path s14.TYPE_ID : Int'
|     select: Pure t58 : Vector[t58<(Int', String', Int', Int', String')>]
|       value: ProductNode : (Int', String', Int', Int', String')
|         1: Path s59._1.PRODUCT_ID : Int'
|         2: Path s59._1.PRODUCT_NAME : String'
|         3: Path s59._1.PRODUCT_PRICE : Int'
|         4: Path s59._1.PRODUCT_QUANTITY : Int'
|         5: Path s59._2.TYPE_NAME : String'
|     where: Apply Function > : Boolean
|       0: Path s59._1.PRODUCT_QUANTITY : Int'
|       1: LiteralNode 0 (volatileHint=false) : Int'
|     orderBy Ordering(Asc,NullsDefault): Path s59._2.TYPE_NAME : String'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52.s53 : Int'
|     2: Path s52.s54 : String'
|     3: Path s52.s55 : Int'
|     4: Path s52.s56 : Int'
|     5: Path s52.s57 : String'

13:08:34.403 [main] DEBUG slick.compiler.QueryCompiler - After phase removeFieldNames:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t58<(Int', String', Int', Int', String')>]
|     from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|       left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|       right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|       on: Apply Function = : Boolean
|         0: Path s13.PRODUCT_TYPE_ID : Int'
|         1: Path s14.TYPE_ID : Int'
|     select: Pure t58 : Vector[t58<(Int', String', Int', Int', String')>]
|       value: ProductNode : (Int', String', Int', Int', String')
|         1: Path s59._1.PRODUCT_ID : Int'
|         2: Path s59._1.PRODUCT_NAME : String'
|         3: Path s59._1.PRODUCT_PRICE : Int'
|         4: Path s59._1.PRODUCT_QUANTITY : Int'
|         5: Path s59._2.TYPE_NAME : String'
|     where: Apply Function > : Boolean
|       0: Path s59._1.PRODUCT_QUANTITY : Int'
|       1: LiteralNode 0 (volatileHint=false) : Int'
|     orderBy Ordering(Asc,NullsDefault): Path s59._2.TYPE_NAME : String'
|   map: ProductNode : (Int', String', Int', Int', String')
|     1: Path s52._1 : Int'
|     2: Path s52._2 : String'
|     3: Path s52._3 : Int'
|     4: Path s52._4 : Int'
|     5: Path s52._5 : String'

13:08:34.404 [main] DEBUG slick.compiler.CodeGen - Compiling server-side and mapping with server-side:
| Comprehension s59, Some(Apply Function >), None, ConstArray((Path s59._2.TYPE_NAME,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t58<(Int', String', Int', Int', String')>]
|   from s59: Join Inner : Vector[(@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>, @t18<{TYPE_ID: Int', TYPE_NAME: String'}>)]
|     left s13: Table PRODUCTS : Vector[@t16<{PRODUCT_NAME: String', PRODUCT_QUANTITY: Int', PRODUCT_TYPE_ID: Int', PRODUCT_ID: Int', PRODUCT_PRICE: Int'}>]
|     right s14: Table TYPES : Vector[@t18<{TYPE_ID: Int', TYPE_NAME: String'}>]
|     on: Apply Function = : Boolean
|       0: Path s13.PRODUCT_TYPE_ID : Int'
|       1: Path s14.TYPE_ID : Int'
|   select: Pure t58 : Vector[t58<(Int', String', Int', Int', String')>]
|     value: ProductNode : (Int', String', Int', Int', String')
|       1: Path s59._1.PRODUCT_ID : Int'
|       2: Path s59._1.PRODUCT_NAME : String'
|       3: Path s59._1.PRODUCT_PRICE : Int'
|       4: Path s59._1.PRODUCT_QUANTITY : Int'
|       5: Path s59._2.TYPE_NAME : String'
|   where: Apply Function > : Boolean
|     0: Path s59._1.PRODUCT_QUANTITY : Int'
|     1: LiteralNode 0 (volatileHint=false) : Int'
|   orderBy Ordering(Asc,NullsDefault): Path s59._2.TYPE_NAME : String'

13:08:34.405 [main] DEBUG s.relational.ResultConverterCompiler - Compiled ResultConverter
| ProductResultConverter
|   1: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'
|   2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|   3: BaseResultConverter$mcI$sp idx=3, name=<computed> : Int'
|   4: BaseResultConverter$mcI$sp idx=4, name=<computed> : Int'
|   5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'

13:08:34.405 [main] DEBUG slick.compiler.CodeGen - Compiled server-side to:
| CompiledStatement "select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME`" : Vector[t58<(Int', String', Int', Int', String')>]

13:08:34.405 [main] DEBUG slick.compiler.QueryCompiler - After phase codeGen:
| ResultSetMapping : Vector[(Int', String', Int', Int', String')]
|   from s52: CompiledStatement "select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME`" : Vector[t58<(Int', String', Int', Int', String')>]
|   map: CompiledMapping : (Int', String', Int', Int', String')
|     converter: ProductResultConverter
|       1: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'
|       2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|       3: BaseResultConverter$mcI$sp idx=3, name=<computed> : Int'
|       4: BaseResultConverter$mcI$sp idx=4, name=<computed> : Int'
|       5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'

13:08:34.405 [main] DEBUG s.compiler.QueryCompilerBenchmark - ------------------- Phase: Time ---------
13:08:34.405 [main] DEBUG s.compiler.QueryCompilerBenchmark -       assignUniqueSymbols:    2.949533 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -           unrollTailBinds:    0.355805 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -                inferTypes:    0.555025 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -              expandTables:    5.450114 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -           forceOuterBinds:    3.620143 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -         removeMappedTypes:    0.693115 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -                expandSums:    0.069851 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -         emulateOuterJoins:    0.196680 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -             expandRecords:    3.737325 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -        flattenProjections:   23.066820 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -              rewriteJoins:    0.333275 ms
13:08:34.406 [main] DEBUG s.compiler.QueryCompilerBenchmark -             verifySymbols:    0.456659 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -             relabelUnions:    0.270297 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -          createAggregates:    0.039939 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -           resolveZipJoins:    0.191787 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -          pruneProjections:    4.540878 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -           rewriteDistinct:    0.046312 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -    createResultSetMapping:    3.029874 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -            hoistClientOps:    4.187945 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -         reorderOperations:    0.284952 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -     mergeToComprehensions:   15.351182 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -            optimizeScalar:    0.103947 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -          removeFieldNames:    3.012310 ms
13:08:34.407 [main] DEBUG s.compiler.QueryCompilerBenchmark -                   codeGen:    2.064521 ms
13:08:34.408 [main] DEBUG s.compiler.QueryCompilerBenchmark -                     TOTAL:   74.608289 ms
13:08:34.409 [main] DEBUG slick.basic.BasicBackend.action - #1: result [select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME` desc]
13:08:34.420 [main] DEBUG slick.basic.BasicBackend.action - #1: result [select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME`]
13:08:34.738 [mydb-1] DEBUG slick.jdbc.JdbcBackend.statement - Preparing statement: select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME` desc
13:08:34.738 [mydb-2] DEBUG slick.jdbc.JdbcBackend.statement - Preparing statement: select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME`
13:08:34.753 [mydb-2] DEBUG slick.jdbc.JdbcBackend.statement - Executing prepared statement: com.mysql.cj.jdbc.ClientPreparedStatement: select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME`
13:08:34.753 [mydb-1] DEBUG slick.jdbc.JdbcBackend.statement - Executing prepared statement: com.mysql.cj.jdbc.ClientPreparedStatement: select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME` desc
13:08:34.754 [mydb-2] DEBUG s.j.J.statementAndParameter - Executing prepared statement: com.mysql.cj.jdbc.ClientPreparedStatement: select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME`
13:08:34.754 [mydb-1] DEBUG s.j.J.statementAndParameter - Executing prepared statement: com.mysql.cj.jdbc.ClientPreparedStatement: select s13.`PRODUCT_ID`, s13.`PRODUCT_NAME`, s13.`PRODUCT_PRICE`, s13.`PRODUCT_QUANTITY`, s14.`TYPE_NAME` from `PRODUCTS` s13, `TYPES` s14 where (s13.`PRODUCT_QUANTITY` > 0) and (s13.`PRODUCT_TYPE_ID` = s14.`TYPE_ID`) order by s14.`TYPE_NAME` desc
13:08:34.761 [mydb-2] DEBUG slick.jdbc.JdbcBackend.benchmark - Execution of prepared statement took 6ms
13:08:34.761 [mydb-1] DEBUG slick.jdbc.JdbcBackend.benchmark - Execution of prepared statement took 6ms
13:08:34.785 [mydb-2] DEBUG slick.jdbc.StatementInvoker.result - /------------+--------------+---------------+------------------+-------------\
13:08:34.785 [mydb-1] DEBUG slick.jdbc.StatementInvoker.result - /------------+--------------+---------------+------------------+-------------\
13:08:34.785 [mydb-2] DEBUG slick.jdbc.StatementInvoker.result - | 1          | 2            | 3             | 4                | 5           |
13:08:34.785 [mydb-1] DEBUG slick.jdbc.StatementInvoker.result - | 1          | 2            | 3             | 4                | 5           |
13:08:34.785 [mydb-2] DEBUG slick.jdbc.StatementInvoker.result - | PRODUCT_ID | PRODUCT_NAME | PRODUCT_PRICE | PRODUCT_QUANTITY | TYPE_NAME   |
13:08:34.785 [mydb-1] DEBUG slick.jdbc.StatementInvoker.result - | PRODUCT_ID | PRODUCT_NAME | PRODUCT_PRICE | PRODUCT_QUANTITY | TYPE_NAME   |
13:08:34.785 [mydb-2] DEBUG slick.jdbc.StatementInvoker.result - |------------+--------------+---------------+------------------+-------------|
13:08:34.785 [mydb-1] DEBUG slick.jdbc.StatementInvoker.result - |------------+--------------+---------------+------------------+-------------|
13:08:34.785 [mydb-2] DEBUG slick.jdbc.StatementInvoker.result - | 2          | vaza         | 80            | 20               | decoratiuni |
13:08:34.785 [mydb-1] DEBUG slick.jdbc.StatementInvoker.result - | 1          | cana         | 20            | 100              | vesela      |
13:08:34.785 [mydb-2] DEBUG slick.jdbc.StatementInvoker.result - | 3          | pian         | 5000          | 3                | muzica      |
13:08:34.785 [mydb-1] DEBUG slick.jdbc.StatementInvoker.result - | 3          | pian         | 5000          | 3                | muzica      |
13:08:34.785 [mydb-2] DEBUG slick.jdbc.StatementInvoker.result - | 1          | cana         | 20            | 100              | vesela      |
13:08:34.785 [mydb-1] DEBUG slick.jdbc.StatementInvoker.result - | 2          | vaza         | 80            | 20               | decoratiuni |
13:08:34.785 [mydb-2] DEBUG slick.jdbc.StatementInvoker.result - \------------+--------------+---------------+------------------+-------------/
13:08:34.785 [mydb-1] DEBUG slick.jdbc.StatementInvoker.result - \------------+--------------+---------------+------------------+-------------/
13:08:34.801 [main] DEBUG slick.compiler.QueryCompiler - Source:
| Bind
|   from s2: Join Inner
|     left s3: TableExpansion
|       table s5: Table USERS
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s5.USER_ID : Int'
|           2: Path s5.USER_NAME : String'
|           3: Path s5.USER_EMAIL : String'
|           4: Path s5.USER_BANK_ID : Int'
|     right s4: TableExpansion
|       table s6: Table BANK
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s6.BANK_ID : Int'
|           2: Path s6.BANK_BALANCE : Int'
|     on: Apply Function =
|       0: Path s3.USER_BANK_ID : Int'
|       1: Path s4.BANK_ID : Int'
|   select: Pure t7
|     value: ProductNode
|       1: Path s2._1.USER_ID : Int'
|       2: Path s2._2.BANK_BALANCE : Int'

13:08:34.801 [main] DEBUG slick.compiler.AssignUniqueSymbols - Detected features: UsedFeatures(false,true,false,false)
13:08:34.802 [main] DEBUG slick.compiler.QueryCompiler - After phase assignUniqueSymbols:
| Bind
|   from s8: Join Inner
|     left s9: TableExpansion
|       table s11: Table USERS
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s11.USER_ID : Int'
|           2: Path s11.USER_NAME : String'
|           3: Path s11.USER_EMAIL : String'
|           4: Path s11.USER_BANK_ID : Int'
|     right s10: TableExpansion
|       table s13: Table BANK
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s13.BANK_ID : Int'
|           2: Path s13.BANK_BALANCE : Int'
|     on: Apply Function =
|       0: Path s9.USER_BANK_ID : Int'
|       1: Path s10.BANK_ID : Int'
|   select: Pure t15
|     value: ProductNode
|       1: Path s8._1.USER_ID : Int'
|       2: Path s8._2.BANK_BALANCE : Int'

13:08:34.802 [main] DEBUG slick.compiler.QueryCompiler - After phase unrollTailBinds: (no change)
13:08:34.802 [main] DEBUG slick.compiler.QueryCompiler - After phase inferTypes: (no change)
13:08:34.803 [main] DEBUG slick.compiler.ExpandTables - Found Selects for NominalTypes: @(slick.jdbc.MySQLProfile$._.USERS), @(slick.jdbc.MySQLProfile$._.BANK)
13:08:34.803 [main] DEBUG slick.compiler.ExpandTables - With correct table types:
| Bind : Vector[t15<(Int', Int')>]
|   from s8: Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|     left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|     right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|     on: Apply Function = : Boolean
|       0: Path s9.USER_BANK_ID : Int'
|       1: Path s10.BANK_ID : Int'
|   select: Pure t15 : Vector[t15<(Int', Int')>]
|     value: ProductNode : (Int', Int')
|       1: Path s8._1.USER_ID : Int'
|       2: Path s8._2.BANK_BALANCE : Int'

13:08:34.804 [main] DEBUG slick.compiler.ExpandTables - Table expansions: @t12 -> (s11,TypeMapping), @t14 -> (s13,TypeMapping)
13:08:34.804 [main] DEBUG slick.compiler.QueryCompiler - After phase expandTables:
| Bind : Vector[t15<(Int', Int')>]
|   from s8: Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|     left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|     right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|     on: Apply Function = : Boolean
|       0: Path s9.USER_BANK_ID : Int'
|       1: Path s10.BANK_ID : Int'
|   select: Pure t15 : Vector[t15<(Int', Int')>]
|     value: ProductNode : (Int', Int')
|       1: Path s8._1.USER_ID : Int'
|       2: Path s8._2.BANK_BALANCE : Int'

13:08:34.805 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s16 for Table USERS
13:08:34.805 [main] DEBUG slick.compiler.ForceOuterBinds - Introducing new Bind s17 for Table BANK
13:08:34.806 [main] DEBUG slick.compiler.QueryCompiler - After phase forceOuterBinds:
| Bind : Vector[t15<(Int', Int')>]
|   from s8: Join Inner : Vector[(t18<@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>>, t19<@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>>)]
|     left s9: Bind : Vector[t18<@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>>]
|       from s16: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|       select: Pure t18 : Vector[t18<@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>>]
|         value: Ref s16 : @t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>
|     right s10: Bind : Vector[t19<@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>>]
|       from s17: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|       select: Pure t19 : Vector[t19<@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>>]
|         value: Ref s17 : @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>
|     on: Apply Function = : Boolean
|       0: Path s9.USER_BANK_ID : Int'
|       1: Path s10.BANK_ID : Int'
|   select: Pure t15 : Vector[t15<(Int', Int')>]
|     value: ProductNode : (Int', Int')
|       1: Path s8._1.USER_ID : Int'
|       2: Path s8._2.BANK_BALANCE : Int'

13:08:34.806 [main] DEBUG slick.compiler.QueryCompiler - After phase removeMappedTypes: (no change)
13:08:34.806 [main] DEBUG slick.compiler.QueryCompiler - After phase expandSums: (no change)
13:08:34.806 [main] DEBUG slick.compiler.QueryCompiler - After phase emulateOuterJoins: (no change)
13:08:34.807 [main] DEBUG slick.compiler.QueryCompiler - After phase expandRecords:
| Bind : Vector[t15<(Int', Int')>]
|   from s8: Join Inner : Vector[(t18<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, t19<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|     left s9: Bind : Vector[t18<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|       from s16: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|       select: Pure t18 : Vector[t18<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|         value: StructNode : {USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}
|           USER_ID: Path s16.USER_ID : Int'
|           USER_NAME: Path s16.USER_NAME : String'
|           USER_EMAIL: Path s16.USER_EMAIL : String'
|           USER_BANK_ID: Path s16.USER_BANK_ID : Int'
|     right s10: Bind : Vector[t19<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|       from s17: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|       select: Pure t19 : Vector[t19<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|         value: StructNode : {BANK_ID: Int', BANK_BALANCE: Int'}
|           BANK_ID: Path s17.BANK_ID : Int'
|           BANK_BALANCE: Path s17.BANK_BALANCE : Int'
|     on: Apply Function = : Boolean
|       0: Path s9.USER_BANK_ID : Int'
|       1: Path s10.BANK_ID : Int'
|   select: Pure t15 : Vector[t15<(Int', Int')>]
|     value: ProductNode : (Int', Int')
|       1: Path s8._1.USER_ID : Int'
|       2: Path s8._2.BANK_BALANCE : Int'

13:08:34.807 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t18
13:08:34.807 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s16.USER_ID with symbols 
| Path s16.USER_ID : Int'

13:08:34.807 [main] DEBUG slick.compiler.FlattenProjections - Translated s16.USER_ID to:
| Path s16.USER_ID

13:08:34.807 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s16.USER_NAME with symbols 
| Path s16.USER_NAME : String'

13:08:34.807 [main] DEBUG slick.compiler.FlattenProjections - Translated s16.USER_NAME to:
| Path s16.USER_NAME

13:08:34.807 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s16.USER_EMAIL with symbols 
| Path s16.USER_EMAIL : String'

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Translated s16.USER_EMAIL to:
| Path s16.USER_EMAIL

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s16.USER_BANK_ID with symbols 
| Path s16.USER_BANK_ID : Int'

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Translated s16.USER_BANK_ID to:
| Path s16.USER_BANK_ID

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| StructNode
|   USER_ID: Path s16.USER_ID
|   USER_NAME: Path s16.USER_NAME
|   USER_EMAIL: Path s16.USER_EMAIL
|   USER_BANK_ID: Path s16.USER_BANK_ID

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path USER_ID
| Path s16.USER_ID

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s20 -> Path s16.USER_ID
13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path USER_NAME
| Path s16.USER_NAME

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s21 -> Path s16.USER_NAME
13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path USER_EMAIL
| Path s16.USER_EMAIL

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s22 -> Path s16.USER_EMAIL
13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path USER_BANK_ID
| Path s16.USER_BANK_ID

13:08:34.808 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s23 -> Path s16.USER_BANK_ID
13:08:34.809 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t18: (Map(List(USER_NAME) -> s21, List(USER_BANK_ID) -> s23, List(USER_ID) -> s20, List(USER_EMAIL) -> s22), UnassignedType)
13:08:34.809 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t18
|   value: StructNode
|     s20: Path s16.USER_ID
|     s21: Path s16.USER_NAME
|     s22: Path s16.USER_EMAIL
|     s23: Path s16.USER_BANK_ID

13:08:34.809 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t19
13:08:34.809 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s17.BANK_ID with symbols t18
| Path s17.BANK_ID : Int'

13:08:34.809 [main] DEBUG slick.compiler.FlattenProjections - Translated s17.BANK_ID to:
| Path s17.BANK_ID

13:08:34.809 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s17.BANK_BALANCE with symbols t18
| Path s17.BANK_BALANCE : Int'

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Translated s17.BANK_BALANCE to:
| Path s17.BANK_BALANCE

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| StructNode
|   BANK_ID: Path s17.BANK_ID
|   BANK_BALANCE: Path s17.BANK_BALANCE

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path BANK_ID
| Path s17.BANK_ID

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s24 -> Path s17.BANK_ID
13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path BANK_BALANCE
| Path s17.BANK_BALANCE

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s25 -> Path s17.BANK_BALANCE
13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t19: (Map(List(BANK_BALANCE) -> s25, List(BANK_ID) -> s24), UnassignedType)
13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t19
|   value: StructNode
|     s24: Path s17.BANK_ID
|     s25: Path s17.BANK_BALANCE

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s9.USER_BANK_ID with symbols t18, t19
| Path s9.USER_BANK_ID : Int'

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Found s9.USER_BANK_ID with local part Path USER_BANK_ID over t18
13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t18: Map(List(USER_NAME) -> s21, List(USER_BANK_ID) -> s23, List(USER_ID) -> s20, List(USER_EMAIL) -> s22)
13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Translated s9.USER_BANK_ID to:
| Path s9.s23

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s10.BANK_ID with symbols t18, t19
| Path s10.BANK_ID : Int'

13:08:34.810 [main] DEBUG slick.compiler.FlattenProjections - Found s10.BANK_ID with local part Path BANK_ID over t19
13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: Map(List(BANK_BALANCE) -> s25, List(BANK_ID) -> s24)
13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Translated s10.BANK_ID to:
| Path s10.s24

13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Flattening projection t15
13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s8._1.USER_ID with symbols t18, t19
| Path s8._1.USER_ID : Int'

13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Found s8._1.USER_ID with local part Path USER_ID over t18
13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t18: Map(List(USER_NAME) -> s21, List(USER_BANK_ID) -> s23, List(USER_ID) -> s20, List(USER_EMAIL) -> s22)
13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Translated s8._1.USER_ID to:
| Path s8._1.s20

13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Analyzing s8._2.BANK_BALANCE with symbols t18, t19
| Path s8._2.BANK_BALANCE : Int'

13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Found s8._2.BANK_BALANCE with local part Path BANK_BALANCE over t19
13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections -   Translation for t19: Map(List(BANK_BALANCE) -> s25, List(BANK_ID) -> s24)
13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Translated s8._2.BANK_BALANCE to:
| Path s8._2.s25

13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path 
| ProductNode
|   1: Path s8._1.s20
|   2: Path s8._2.s25

13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _1
| Path s8._1.s20

13:08:34.811 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s26 -> Path s8._1.s20
13:08:34.812 [main] DEBUG slick.compiler.FlattenProjections - Flattening node at Path _2
| Path s8._2.s25

13:08:34.812 [main] DEBUG slick.compiler.FlattenProjections - Adding definition: s27 -> Path s8._2.s25
13:08:34.812 [main] DEBUG slick.compiler.FlattenProjections - Adding translation for t15: (Map(List(_2) -> s27, List(_1) -> s26), UnassignedType)
13:08:34.812 [main] DEBUG slick.compiler.FlattenProjections - Flattened projection to
| Pure t15
|   value: StructNode
|     s26: Path s8._1.s20
|     s27: Path s8._2.s25

13:08:34.813 [main] DEBUG slick.compiler.QueryCompiler - After phase flattenProjections:
| Bind : Vector[t15<{s26: Int', s27: Int'}>]
|   from s8: Join Inner : Vector[(t18<{s20: Int', s21: String', s22: String', s23: Int'}>, t19<{s24: Int', s25: Int'}>)]
|     left s9: Bind : Vector[t18<{s20: Int', s21: String', s22: String', s23: Int'}>]
|       from s16: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|       select: Pure t18 : Vector[t18<{s20: Int', s21: String', s22: String', s23: Int'}>]
|         value: StructNode : {s20: Int', s21: String', s22: String', s23: Int'}
|           s20: Path s16.USER_ID : Int'
|           s21: Path s16.USER_NAME : String'
|           s22: Path s16.USER_EMAIL : String'
|           s23: Path s16.USER_BANK_ID : Int'
|     right s10: Bind : Vector[t19<{s24: Int', s25: Int'}>]
|       from s17: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|       select: Pure t19 : Vector[t19<{s24: Int', s25: Int'}>]
|         value: StructNode : {s24: Int', s25: Int'}
|           s24: Path s17.BANK_ID : Int'
|           s25: Path s17.BANK_BALANCE : Int'
|     on: Apply Function = : Boolean
|       0: Path s9.s23 : Int'
|       1: Path s10.s24 : Int'
|   select: Pure t15 : Vector[t15<{s26: Int', s27: Int'}>]
|     value: StructNode : {s26: Int', s27: Int'}
|       s26: Path s8._1.s20 : Int'
|       s27: Path s8._2.s25 : Int'

13:08:34.813 [main] DEBUG slick.compiler.QueryCompiler - After phase rewriteJoins: (no change)
13:08:34.813 [main] DEBUG slick.compiler.QueryCompiler - After phase verifySymbols: (no change)
13:08:34.813 [main] DEBUG slick.compiler.QueryCompiler - After phase relabelUnions: (no change)
13:08:34.813 [main] DEBUG slick.compiler.QueryCompiler - After phase createAggregates: (no change)
13:08:34.813 [main] DEBUG slick.compiler.QueryCompiler - After phase resolveZipJoins: (no change)
13:08:34.813 [main] DEBUG slick.compiler.PruneProjections - Unreferenced: t15; Field refs: (@t12,USER_BANK_ID), (@t12,USER_NAME), (@t14,BANK_ID), (@t14,BANK_BALANCE), (t19,s25), (t18,s20), (@t12,USER_ID), (t19,s24), (@t12,USER_EMAIL), (t18,s23)
13:08:34.814 [main] DEBUG slick.compiler.QueryCompiler - After phase pruneProjections:
| Bind : Vector[t15<{s26: Int', s27: Int'}>]
|   from s8: Join Inner : Vector[(t18<{s20: Int', s23: Int'}>, t19<{s24: Int', s25: Int'}>)]
|     left s9: Bind : Vector[t18<{s20: Int', s23: Int'}>]
|       from s16: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|       select: Pure t18 : Vector[t18<{s20: Int', s23: Int'}>]
|         value: StructNode : {s20: Int', s23: Int'}
|           s20: Path s16.USER_ID : Int'
|           s23: Path s16.USER_BANK_ID : Int'
|     right s10: Bind : Vector[t19<{s24: Int', s25: Int'}>]
|       from s17: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|       select: Pure t19 : Vector[t19<{s24: Int', s25: Int'}>]
|         value: StructNode : {s24: Int', s25: Int'}
|           s24: Path s17.BANK_ID : Int'
|           s25: Path s17.BANK_BALANCE : Int'
|     on: Apply Function = : Boolean
|       0: Path s9.s23 : Int'
|       1: Path s10.s24 : Int'
|   select: Pure t15 : Vector[t15<{s26: Int', s27: Int'}>]
|     value: StructNode : {s26: Int', s27: Int'}
|       s26: Path s8._1.s20 : Int'
|       s27: Path s8._2.s25 : Int'

13:08:34.815 [main] DEBUG slick.compiler.RewriteDistinct - No DISTINCT used as determined by assignUniqueSymbols - skipping phase
13:08:34.815 [main] DEBUG slick.compiler.QueryCompiler - After phase rewriteDistinct: (no change)
13:08:34.815 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from t15<(Int', Int')>
13:08:34.815 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from Int'
13:08:34.815 [main] DEBUG s.compiler.CreateResultSetMapping - Creating mapping from Int'
13:08:34.816 [main] DEBUG slick.compiler.QueryCompiler - After phase createResultSetMapping:
| ResultSetMapping : Vector[(Int', Int')]
|   from s28: Bind : Vector[t15<{s26: Int', s27: Int'}>]
|     from s8: Join Inner : Vector[(t18<{s20: Int', s23: Int'}>, t19<{s24: Int', s25: Int'}>)]
|       left s9: Bind : Vector[t18<{s20: Int', s23: Int'}>]
|         from s16: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|         select: Pure t18 : Vector[t18<{s20: Int', s23: Int'}>]
|           value: StructNode : {s20: Int', s23: Int'}
|             s20: Path s16.USER_ID : Int'
|             s23: Path s16.USER_BANK_ID : Int'
|       right s10: Bind : Vector[t19<{s24: Int', s25: Int'}>]
|         from s17: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|         select: Pure t19 : Vector[t19<{s24: Int', s25: Int'}>]
|           value: StructNode : {s24: Int', s25: Int'}
|             s24: Path s17.BANK_ID : Int'
|             s25: Path s17.BANK_BALANCE : Int'
|       on: Apply Function = : Boolean
|         0: Path s9.s23 : Int'
|         1: Path s10.s24 : Int'
|     select: Pure t15 : Vector[t15<{s26: Int', s27: Int'}>]
|       value: StructNode : {s26: Int', s27: Int'}
|         s26: Path s8._1.s20 : Int'
|         s27: Path s8._2.s25 : Int'
|   map: ProductNode : (Int', Int')
|     1: Path s28.s26 : Int'
|     2: Path s28.s27 : Int'

13:08:34.817 [main] DEBUG slick.compiler.HoistClientOps - Hoisting operations from Join:
| Join Inner : Vector[(t18<{s20: Int', s23: Int'}>, t19<{s24: Int', s25: Int'}>)]
|   left s9: Bind : Vector[t18<{s20: Int', s23: Int'}>]
|     from s16: ...
|     select: Pure t18 : Vector[t18<{s20: Int', s23: Int'}>]
|       value: StructNode : {s20: Int', s23: Int'}
|         s20: Path s16.USER_ID : Int'
|         s23: Path s16.USER_BANK_ID : Int'
|   right s10: Bind : Vector[t19<{s24: Int', s25: Int'}>]
|     from s17: ...
|     select: Pure t19 : Vector[t19<{s24: Int', s25: Int'}>]
|       value: StructNode : {s24: Int', s25: Int'}
|         s24: Path s17.BANK_ID : Int'
|         s25: Path s17.BANK_BALANCE : Int'
|   on: Apply Function = : Boolean
|     0: Path s9.s23 : Int'
|     1: Path s10.s24 : Int'

13:08:34.818 [main] DEBUG slick.compiler.HoistClientOps - Hoisting operations from defs in left side of Join: 
13:08:34.819 [main] DEBUG slick.compiler.HoistClientOps - New defs: Map(Path s16.USER_ID -> s29, Path s16.USER_BANK_ID -> s30)
13:08:34.820 [main] DEBUG slick.compiler.HoistClientOps - Translated left join side:
| Bind : Vector[t31<{s29: Int', s30: Int'}>]
|   from s16: ...
|   select: Pure t31 : Vector[t31<{s29: Int', s30: Int'}>]
|     value: StructNode : {s29: Int', s30: Int'}
|       s29: Path s16.USER_ID : Int'
|       s30: Path s16.USER_BANK_ID : Int'

13:08:34.821 [main] DEBUG slick.compiler.HoistClientOps - Hoisting operations from defs in right side of Join: 
13:08:34.822 [main] DEBUG slick.compiler.HoistClientOps - New defs: Map(Path s17.BANK_ID -> s32, Path s17.BANK_BALANCE -> s33)
13:08:34.823 [main] DEBUG slick.compiler.HoistClientOps - Translated right join side:
| Bind : Vector[t34<{s32: Int', s33: Int'}>]
|   from s17: ...
|   select: Pure t34 : Vector[t34<{s32: Int', s33: Int'}>]
|     value: StructNode : {s32: Int', s33: Int'}
|       s32: Path s17.BANK_ID : Int'
|       s33: Path s17.BANK_BALANCE : Int'

13:08:34.826 [main] DEBUG slick.compiler.HoistClientOps - from3
| Join Inner
|   left s9: Bind : Vector[t31<{s29: Int', s30: Int'}>]
|     from s16: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|     select: Pure t31 : Vector[t31<{s29: Int', s30: Int'}>]
|       value: StructNode : {s29: Int', s30: Int'}
|         s29: Path s16.USER_ID : Int'
|         s30: Path s16.USER_BANK_ID : Int'
|   right s10: Bind : Vector[t34<{s32: Int', s33: Int'}>]
|     from s17: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|     select: Pure t34 : Vector[t34<{s32: Int', s33: Int'}>]
|       value: StructNode : {s32: Int', s33: Int'}
|         s32: Path s17.BANK_ID : Int'
|         s33: Path s17.BANK_BALANCE : Int'
|   on: Apply Function =
|     0: Path s9.s30
|     1: Path s10.s32

13:08:34.826 [main] DEBUG slick.compiler.HoistClientOps - sel2
| Pure t15
|   value: StructNode
|     s26: Path s8._1.s29
|     s27: Path s8._2.s33

13:08:34.826 [main] DEBUG slick.compiler.HoistClientOps - Hoisting operations from defs: 
13:08:34.826 [main] DEBUG slick.compiler.HoistClientOps - New defs: Map(0 -> (Path s8._1.s29,s35), 1 -> (Path s8._2.s33,s36))
13:08:34.827 [main] DEBUG slick.compiler.HoistClientOps - New ResultSetMapping:
| ResultSetMapping : Vector[(Int', Int')]
|   from s28: Bind : Vector[t37<{s35: Int', s36: Int'}>]
|     from s8: ...
|     select: Pure t37 : Vector[t37<{s35: Int', s36: Int'}>]
|       value: StructNode : {s35: Int', s36: Int'}
|         s35: Path s8._1.s29 : Int'
|         s36: Path s8._2.s33 : Int'
|   map: ProductNode : (Int', Int')
|     1: Path s28.s35 : Int'
|     2: Path s28.s36 : Int'

13:08:34.828 [main] DEBUG slick.compiler.QueryCompiler - After phase hoistClientOps:
| ResultSetMapping : Vector[(Int', Int')]
|   from s28: Bind : Vector[t37<{s35: Int', s36: Int'}>]
|     from s8: Join Inner : Vector[(t31<{s29: Int', s30: Int'}>, t34<{s32: Int', s33: Int'}>)]
|       left s9: Bind : Vector[t31<{s29: Int', s30: Int'}>]
|         from s16: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|         select: Pure t31 : Vector[t31<{s29: Int', s30: Int'}>]
|           value: StructNode : {s29: Int', s30: Int'}
|             s29: Path s16.USER_ID : Int'
|             s30: Path s16.USER_BANK_ID : Int'
|       right s10: Bind : Vector[t34<{s32: Int', s33: Int'}>]
|         from s17: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|         select: Pure t34 : Vector[t34<{s32: Int', s33: Int'}>]
|           value: StructNode : {s32: Int', s33: Int'}
|             s32: Path s17.BANK_ID : Int'
|             s33: Path s17.BANK_BALANCE : Int'
|       on: Apply Function = : Boolean
|         0: Path s9.s30 : Int'
|         1: Path s10.s32 : Int'
|     select: Pure t37 : Vector[t37<{s35: Int', s36: Int'}>]
|       value: StructNode : {s35: Int', s36: Int'}
|         s35: Path s8._1.s29 : Int'
|         s36: Path s8._2.s33 : Int'
|   map: ProductNode : (Int', Int')
|     1: Path s28.s35 : Int'
|     2: Path s28.s36 : Int'

13:08:34.828 [main] DEBUG slick.compiler.QueryCompiler - After phase reorderOperations: (no change)
13:08:34.828 [main] DEBUG slick.compiler.MergeToComprehensions - Table fields: MapView(<not computed>)
13:08:34.829 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from Join s9/s10:
| Join Inner : Vector[(t31<{s29: Int', s30: Int'}>, t34<{s32: Int', s33: Int'}>)]
|   left s9: Bind : Vector[t31<{s29: Int', s30: Int'}>]
|     from s16: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|     select: Pure t31 : Vector[t31<{s29: Int', s30: Int'}>]
|       value: StructNode : {s29: Int', s30: Int'}
|         s29: Path s16.USER_ID : Int'
|         s30: Path s16.USER_BANK_ID : Int'
|   right s10: Bind : Vector[t34<{s32: Int', s33: Int'}>]
|     from s17: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|     select: Pure t34 : Vector[t34<{s32: Int', s33: Int'}>]
|       value: StructNode : {s32: Int', s33: Int'}
|         s32: Path s17.BANK_ID : Int'
|         s33: Path s17.BANK_BALANCE : Int'
|   on: Apply Function = : Boolean
|     0: Path s9.s30 : Int'
|     1: Path s10.s32 : Int'

13:08:34.829 [main] DEBUG slick.compiler.MergeToComprehensions - Bind from s16 is aliasing: true
13:08:34.829 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from TableNode:
| Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]

13:08:34.829 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((@t12,USER_ID),List(USER_ID)), ((@t12,USER_BANK_ID),List(USER_BANK_ID)))
13:08:34.829 [main] DEBUG slick.compiler.MergeToComprehensions - Recombining aliasing Bind mappings ConstArray((s29,Path s16.USER_ID), (s30,Path s16.USER_BANK_ID))
13:08:34.829 [main] DEBUG slick.compiler.MergeToComprehensions - Bind from s17 is aliasing: true
13:08:34.829 [main] DEBUG slick.compiler.MergeToComprehensions - Creating source from TableNode:
| Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]

13:08:34.830 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((@t14,BANK_ID),List(BANK_ID)), ((@t14,BANK_BALANCE),List(BANK_BALANCE)))
13:08:34.830 [main] DEBUG slick.compiler.MergeToComprehensions - Recombining aliasing Bind mappings ConstArray((s32,Path s17.BANK_ID), (s33,Path s17.BANK_BALANCE))
13:08:34.830 [main] DEBUG slick.compiler.MergeToComprehensions - Converted left side of Join s9/s10:
| Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]

13:08:34.830 [main] DEBUG slick.compiler.MergeToComprehensions - Converted right side of Join s9/s10:
| Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]

13:08:34.830 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings for `on` clause in Join s9/s10: Map((t31,s29) -> List(_1, USER_ID), (t31,s30) -> List(_1, USER_BANK_ID), (t34,s32) -> List(_2, BANK_ID), (t34,s33) -> List(_2, BANK_BALANCE))
13:08:34.830 [main] DEBUG slick.compiler.MergeToComprehensions - Transformed `on` clause in Join s9/s10:
| Apply Function = : Boolean
|   0: Path s9.USER_BANK_ID : Int'
|   1: Path s10.BANK_ID : Int'

13:08:34.830 [main] DEBUG slick.compiler.MergeToComprehensions - Created source from Join s9/s10:
| Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|   left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|   right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|   on: Apply Function = : Boolean
|     0: Path s9.USER_BANK_ID : Int'
|     1: Path s10.BANK_ID : Int'

13:08:34.831 [main] DEBUG slick.compiler.MergeToComprehensions - Building new Comprehension from:
| Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|   left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|   right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|   on: Apply Function = : Boolean
|     0: Path s9.USER_BANK_ID : Int'
|     1: Path s10.BANK_ID : Int'

13:08:34.831 [main] DEBUG slick.compiler.MergeToComprehensions - Built new Comprehension:
| Comprehension s38, None, None, ConstArray(), None, None, None, None, false : Vector[t39<{s40: Int', s41: Int', s42: Int', s43: Int'}>]
|   from s38: Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|     left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|     right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|     on: Apply Function = : Boolean
|       0: Path s9.USER_BANK_ID : Int'
|       1: Path s10.BANK_ID : Int'
|   select: Pure t39 : Vector[t39<{s40: Int', s41: Int', s42: Int', s43: Int'}>]
|     value: StructNode : {s40: Int', s41: Int', s42: Int', s43: Int'}
|       s40: Path s38._1.USER_ID : Int'
|       s41: Path s38._1.USER_BANK_ID : Int'
|       s42: Path s38._2.BANK_ID : Int'
|       s43: Path s38._2.BANK_BALANCE : Int'

13:08:34.832 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: Map((t31,s29) -> s40, (t31,s30) -> s41, (t34,s32) -> s42, (t34,s33) -> s43)
13:08:34.832 [main] DEBUG slick.compiler.MergeToComprehensions - Merging Bind into Comprehension as 'select':
| Bind : Vector[t37<{s35: Int', s36: Int'}>]
|   from s8: ...
|   select: Pure t37 : Vector[t37<{s35: Int', s36: Int'}>]
|     value: StructNode : {s35: Int', s36: Int'}
|       s35: Path s8._1.s29 : Int'
|       s36: Path s8._2.s33 : Int'

13:08:34.833 [main] DEBUG slick.compiler.MergeToComprehensions - Merged Bind into Comprehension as 'select':
| Comprehension s38, None, None, ConstArray(), None, None, None, None, false : Vector[t37<{s35: Int', s36: Int'}>]
|   from s38: Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|     left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|     right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|     on: Apply Function = : Boolean
|       0: Path s9.USER_BANK_ID : Int'
|       1: Path s10.BANK_ID : Int'
|   select: Pure t37 : Vector[t37<{s35: Int', s36: Int'}>]
|     value: StructNode : {s35: Int', s36: Int'}
|       s35: Path s38._1.USER_ID : Int'
|       s36: Path s38._2.BANK_BALANCE : Int'

13:08:34.833 [main] DEBUG slick.compiler.MergeToComprehensions - Replacements are: Map((t37,s35) -> s35, (t37,s36) -> s36)
13:08:34.833 [main] DEBUG slick.compiler.MergeToComprehensions - Mappings are: ConstArray(((t37,s35),List(s35)), ((t37,s36),List(s36)))
13:08:34.833 [main] DEBUG slick.compiler.QueryCompiler - After phase mergeToComprehensions:
| ResultSetMapping : Vector[(Int', Int')]
|   from s28: Comprehension s38, None, None, ConstArray(), None, None, None, None, false : Vector[t37<{s35: Int', s36: Int'}>]
|     from s38: Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|       left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|       right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|       on: Apply Function = : Boolean
|         0: Path s9.USER_BANK_ID : Int'
|         1: Path s10.BANK_ID : Int'
|     select: Pure t37 : Vector[t37<{s35: Int', s36: Int'}>]
|       value: StructNode : {s35: Int', s36: Int'}
|         s35: Path s38._1.USER_ID : Int'
|         s36: Path s38._2.BANK_BALANCE : Int'
|   map: ProductNode : (Int', Int')
|     1: Path s28.s35 : Int'
|     2: Path s28.s36 : Int'

13:08:34.834 [main] DEBUG slick.compiler.QueryCompiler - After phase optimizeScalar: (no change)
13:08:34.834 [main] DEBUG slick.compiler.RemoveFieldNames - Required symbols: s35 -> 0, s36 -> 1
13:08:34.835 [main] DEBUG slick.compiler.RemoveFieldNames - Transformed RSM: 
| ResultSetMapping
|   from s28: Comprehension s38, None, None, ConstArray(), None, None, None, None, false : Vector[t37<(Int', Int')>]
|     from s38: Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|       left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|       right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|       on: Apply Function = : Boolean
|         0: Path s9.USER_BANK_ID : Int'
|         1: Path s10.BANK_ID : Int'
|     select: Pure t37 : Vector[t37<(Int', Int')>]
|       value: ProductNode : (Int', Int')
|         1: Path s38._1.USER_ID : Int'
|         2: Path s38._2.BANK_BALANCE : Int'
|   map: ProductNode : (Int', Int')
|     1: Path s28.s35 : Int'
|     2: Path s28.s36 : Int'

13:08:34.835 [main] DEBUG slick.compiler.QueryCompiler - After phase removeFieldNames:
| ResultSetMapping : Vector[(Int', Int')]
|   from s28: Comprehension s38, None, None, ConstArray(), None, None, None, None, false : Vector[t37<(Int', Int')>]
|     from s38: Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|       left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|       right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|       on: Apply Function = : Boolean
|         0: Path s9.USER_BANK_ID : Int'
|         1: Path s10.BANK_ID : Int'
|     select: Pure t37 : Vector[t37<(Int', Int')>]
|       value: ProductNode : (Int', Int')
|         1: Path s38._1.USER_ID : Int'
|         2: Path s38._2.BANK_BALANCE : Int'
|   map: ProductNode : (Int', Int')
|     1: Path s28._1 : Int'
|     2: Path s28._2 : Int'

13:08:34.836 [main] DEBUG slick.compiler.CodeGen - Compiling server-side and mapping with server-side:
| Comprehension s38, None, None, ConstArray(), None, None, None, None, false : Vector[t37<(Int', Int')>]
|   from s38: Join Inner : Vector[(@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>, @t14<{BANK_ID: Int', BANK_BALANCE: Int'}>)]
|     left s9: Table USERS : Vector[@t12<{USER_ID: Int', USER_NAME: String', USER_EMAIL: String', USER_BANK_ID: Int'}>]
|     right s10: Table BANK : Vector[@t14<{BANK_ID: Int', BANK_BALANCE: Int'}>]
|     on: Apply Function = : Boolean
|       0: Path s9.USER_BANK_ID : Int'
|       1: Path s10.BANK_ID : Int'
|   select: Pure t37 : Vector[t37<(Int', Int')>]
|     value: ProductNode : (Int', Int')
|       1: Path s38._1.USER_ID : Int'
|       2: Path s38._2.BANK_BALANCE : Int'

13:08:34.836 [main] DEBUG s.relational.ResultConverterCompiler - Compiled ResultConverter
| ProductResultConverter
|   1: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'
|   2: BaseResultConverter$mcI$sp idx=2, name=<computed> : Int'

13:08:34.837 [main] DEBUG slick.compiler.CodeGen - Compiled server-side to:
| CompiledStatement "select s9.`USER_ID`, s10.`BANK_BALANCE` from `USERS` s9, `BANK` s10 where s9.`USER_BANK_ID` = s10.`BANK_ID`" : Vector[t37<(Int', Int')>]

13:08:34.837 [main] DEBUG slick.compiler.QueryCompiler - After phase codeGen:
| ResultSetMapping : Vector[(Int', Int')]
|   from s28: CompiledStatement "select s9.`USER_ID`, s10.`BANK_BALANCE` from `USERS` s9, `BANK` s10 where s9.`USER_BANK_ID` = s10.`BANK_ID`" : Vector[t37<(Int', Int')>]
|   map: CompiledMapping : (Int', Int')
|     converter: ProductResultConverter
|       1: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'
|       2: BaseResultConverter$mcI$sp idx=2, name=<computed> : Int'

13:08:34.837 [main] DEBUG s.compiler.QueryCompilerBenchmark - ------------------- Phase: Time ---------
13:08:34.837 [main] DEBUG s.compiler.QueryCompilerBenchmark -       assignUniqueSymbols:    1.115288 ms
13:08:34.837 [main] DEBUG s.compiler.QueryCompilerBenchmark -           unrollTailBinds:    0.120943 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -                inferTypes:    0.160869 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -              expandTables:    1.812637 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -           forceOuterBinds:    1.622154 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -         removeMappedTypes:    0.152720 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -                expandSums:    0.029456 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -         emulateOuterJoins:    0.063205 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -             expandRecords:    1.151136 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -        flattenProjections:    5.719490 ms
13:08:34.838 [main] DEBUG s.compiler.QueryCompilerBenchmark -              rewriteJoins:    0.090378 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -             verifySymbols:    0.106459 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -             relabelUnions:    0.062926 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -          createAggregates:    0.032522 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -           resolveZipJoins:    0.074749 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -          pruneProjections:    1.289837 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -           rewriteDistinct:    0.080415 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -    createResultSetMapping:    1.010081 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -            hoistClientOps:   12.511613 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -         reorderOperations:    0.102640 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -     mergeToComprehensions:    5.215427 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -            optimizeScalar:    0.101300 ms
13:08:34.839 [main] DEBUG s.compiler.QueryCompilerBenchmark -          removeFieldNames:    1.800608 ms
13:08:34.840 [main] DEBUG s.compiler.QueryCompilerBenchmark -                   codeGen:    1.591476 ms
13:08:34.840 [main] DEBUG s.compiler.QueryCompilerBenchmark -                     TOTAL:   36.018329 ms
13:08:34.840 [main] DEBUG slick.basic.BasicBackend.action - #1: result [select s9.`USER_ID`, s10.`BANK_BALANCE` from `USERS` s9, `BANK` s10 where s9.`USER_BANK_ID` = s10.`BANK_ID`]
13:08:34.852 [mydb-3] DEBUG slick.jdbc.JdbcBackend.statement - Preparing statement: select s9.`USER_ID`, s10.`BANK_BALANCE` from `USERS` s9, `BANK` s10 where s9.`USER_BANK_ID` = s10.`BANK_ID`
13:08:34.852 [mydb-3] DEBUG slick.jdbc.JdbcBackend.statement - Executing prepared statement: com.mysql.cj.jdbc.ClientPreparedStatement: select s9.`USER_ID`, s10.`BANK_BALANCE` from `USERS` s9, `BANK` s10 where s9.`USER_BANK_ID` = s10.`BANK_ID`
13:08:34.852 [mydb-3] DEBUG s.j.J.statementAndParameter - Executing prepared statement: com.mysql.cj.jdbc.ClientPreparedStatement: select s9.`USER_ID`, s10.`BANK_BALANCE` from `USERS` s9, `BANK` s10 where s9.`USER_BANK_ID` = s10.`BANK_ID`
13:08:34.853 [mydb-3] DEBUG slick.jdbc.JdbcBackend.benchmark - Execution of prepared statement took 760µs
13:08:34.854 [mydb-3] DEBUG slick.jdbc.StatementInvoker.result - /---------+--------------\
13:08:34.854 [mydb-3] DEBUG slick.jdbc.StatementInvoker.result - | 1       | 2            |
13:08:34.854 [mydb-3] DEBUG slick.jdbc.StatementInvoker.result - | USER_ID | BANK_BALANCE |
13:08:34.854 [mydb-3] DEBUG slick.jdbc.StatementInvoker.result - |---------+--------------|
13:08:34.854 [mydb-3] DEBUG slick.jdbc.StatementInvoker.result - | 1       | 1000         |
13:08:34.854 [mydb-3] DEBUG slick.jdbc.StatementInvoker.result - | 2       | 2000         |
13:08:34.854 [mydb-3] DEBUG slick.jdbc.StatementInvoker.result - \---------+--------------/
